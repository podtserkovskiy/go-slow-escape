// @generated by Thrift for [[[ program path ]]]
// This file is probably not the place you want to edit!

package metadata // [[[ program thrift source path ]]]

import (
    "fmt"
    "strings"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = strings.Split
var _ = thrift.ZERO


type ThriftPrimitiveType int32

const (
    ThriftPrimitiveType_THRIFT_BOOL_TYPE ThriftPrimitiveType = 1
    ThriftPrimitiveType_THRIFT_BYTE_TYPE ThriftPrimitiveType = 2
    ThriftPrimitiveType_THRIFT_I16_TYPE ThriftPrimitiveType = 3
    ThriftPrimitiveType_THRIFT_I32_TYPE ThriftPrimitiveType = 4
    ThriftPrimitiveType_THRIFT_I64_TYPE ThriftPrimitiveType = 5
    ThriftPrimitiveType_THRIFT_FLOAT_TYPE ThriftPrimitiveType = 6
    ThriftPrimitiveType_THRIFT_DOUBLE_TYPE ThriftPrimitiveType = 7
    ThriftPrimitiveType_THRIFT_BINARY_TYPE ThriftPrimitiveType = 8
    ThriftPrimitiveType_THRIFT_STRING_TYPE ThriftPrimitiveType = 9
    ThriftPrimitiveType_THRIFT_VOID_TYPE ThriftPrimitiveType = 10
)

// Enum value maps for ThriftPrimitiveType
var (
    ThriftPrimitiveTypeToName = map[ThriftPrimitiveType]string {
        ThriftPrimitiveType_THRIFT_BOOL_TYPE: "THRIFT_BOOL_TYPE",
        ThriftPrimitiveType_THRIFT_BYTE_TYPE: "THRIFT_BYTE_TYPE",
        ThriftPrimitiveType_THRIFT_I16_TYPE: "THRIFT_I16_TYPE",
        ThriftPrimitiveType_THRIFT_I32_TYPE: "THRIFT_I32_TYPE",
        ThriftPrimitiveType_THRIFT_I64_TYPE: "THRIFT_I64_TYPE",
        ThriftPrimitiveType_THRIFT_FLOAT_TYPE: "THRIFT_FLOAT_TYPE",
        ThriftPrimitiveType_THRIFT_DOUBLE_TYPE: "THRIFT_DOUBLE_TYPE",
        ThriftPrimitiveType_THRIFT_BINARY_TYPE: "THRIFT_BINARY_TYPE",
        ThriftPrimitiveType_THRIFT_STRING_TYPE: "THRIFT_STRING_TYPE",
        ThriftPrimitiveType_THRIFT_VOID_TYPE: "THRIFT_VOID_TYPE",
    }

    ThriftPrimitiveTypeToValue = map[string]ThriftPrimitiveType {
        "THRIFT_BOOL_TYPE": ThriftPrimitiveType_THRIFT_BOOL_TYPE,
        "THRIFT_BYTE_TYPE": ThriftPrimitiveType_THRIFT_BYTE_TYPE,
        "THRIFT_I16_TYPE": ThriftPrimitiveType_THRIFT_I16_TYPE,
        "THRIFT_I32_TYPE": ThriftPrimitiveType_THRIFT_I32_TYPE,
        "THRIFT_I64_TYPE": ThriftPrimitiveType_THRIFT_I64_TYPE,
        "THRIFT_FLOAT_TYPE": ThriftPrimitiveType_THRIFT_FLOAT_TYPE,
        "THRIFT_DOUBLE_TYPE": ThriftPrimitiveType_THRIFT_DOUBLE_TYPE,
        "THRIFT_BINARY_TYPE": ThriftPrimitiveType_THRIFT_BINARY_TYPE,
        "THRIFT_STRING_TYPE": ThriftPrimitiveType_THRIFT_STRING_TYPE,
        "THRIFT_VOID_TYPE": ThriftPrimitiveType_THRIFT_VOID_TYPE,
    }
)

func (x ThriftPrimitiveType) String() string {
    if v, ok := ThriftPrimitiveTypeToName[x]; ok {
        return v
    }
    return "<UNSET>"
}

func (x ThriftPrimitiveType) Ptr() *ThriftPrimitiveType {
    return &x
}

// Deprecated: Use ThriftPrimitiveTypeToValue instead (e.g. `x, ok := ThriftPrimitiveTypeToValue["name"]`).
func ThriftPrimitiveTypeFromString(s string) (ThriftPrimitiveType, error) {
    if v, ok := ThriftPrimitiveTypeToValue[s]; ok {
        return v, nil
    }
    return ThriftPrimitiveType(0), fmt.Errorf("not a valid ThriftPrimitiveType string")
}


type ThriftConstValuePair struct {
    Key *ThriftConstValue `thrift:"key,1" json:"key" db:"key"`
    Value *ThriftConstValue `thrift:"value,2" json:"value" db:"value"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ThriftConstValuePair{}

func NewThriftConstValuePair() *ThriftConstValuePair {
    return (&ThriftConstValuePair{}).
        SetKeyNonCompat(*NewThriftConstValue()).
        SetValueNonCompat(*NewThriftConstValue())
}

func (x *ThriftConstValuePair) GetKeyNonCompat() *ThriftConstValue {
    return x.Key
}

func (x *ThriftConstValuePair) GetKey() *ThriftConstValue {
    if !x.IsSetKey() {
        return nil
    }

    return x.Key
}

func (x *ThriftConstValuePair) GetValueNonCompat() *ThriftConstValue {
    return x.Value
}

func (x *ThriftConstValuePair) GetValue() *ThriftConstValue {
    if !x.IsSetValue() {
        return nil
    }

    return x.Value
}

func (x *ThriftConstValuePair) SetKeyNonCompat(value ThriftConstValue) *ThriftConstValuePair {
    x.Key = &value
    return x
}

func (x *ThriftConstValuePair) SetKey(value *ThriftConstValue) *ThriftConstValuePair {
    x.Key = value
    return x
}

func (x *ThriftConstValuePair) SetValueNonCompat(value ThriftConstValue) *ThriftConstValuePair {
    x.Value = &value
    return x
}

func (x *ThriftConstValuePair) SetValue(value *ThriftConstValue) *ThriftConstValuePair {
    x.Value = value
    return x
}

func (x *ThriftConstValuePair) IsSetKey() bool {
    return x != nil && x.Key != nil
}

func (x *ThriftConstValuePair) IsSetValue() bool {
    return x != nil && x.Value != nil
}

func (x *ThriftConstValuePair) writeField1(p thrift.Format) error {  // Key
    if !x.IsSetKey() {
        return nil
    }

    if err := p.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetKeyNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftConstValuePair) writeField2(p thrift.Format) error {  // Value
    if !x.IsSetValue() {
        return nil
    }

    if err := p.WriteFieldBegin("value", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftConstValuePair) readField1(p thrift.Format) error {  // Key
    result := *NewThriftConstValue()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetKeyNonCompat(result)
    return nil
}

func (x *ThriftConstValuePair) readField2(p thrift.Format) error {  // Value
    result := *NewThriftConstValue()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetValueNonCompat(result)
    return nil
}

func (x *ThriftConstValuePair) toString1() string {  // Key
    return fmt.Sprintf("%v", x.GetKeyNonCompat())
}

func (x *ThriftConstValuePair) toString2() string {  // Value
    return fmt.Sprintf("%v", x.GetValueNonCompat())
}

// Deprecated: Use NewThriftConstValuePair().GetKey() instead.
func (x *ThriftConstValuePair) DefaultGetKey() *ThriftConstValue {
    if !x.IsSetKey() {
        return NewThriftConstValue()
    }
    return x.Key
}

// Deprecated: Use NewThriftConstValuePair().GetValue() instead.
func (x *ThriftConstValuePair) DefaultGetValue() *ThriftConstValue {
    if !x.IsSetValue() {
        return NewThriftConstValue()
    }
    return x.Value
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftConstValuePair().Set<FieldNameFoo>().Set<FieldNameBar>()
type ThriftConstValuePairBuilder struct {
    obj *ThriftConstValuePair
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftConstValuePair().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewThriftConstValuePairBuilder() *ThriftConstValuePairBuilder {
    return &ThriftConstValuePairBuilder{
        obj: NewThriftConstValuePair(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftConstValuePair().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftConstValuePairBuilder) Key(value *ThriftConstValue) *ThriftConstValuePairBuilder {
    x.obj.Key = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftConstValuePair().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftConstValuePairBuilder) Value(value *ThriftConstValue) *ThriftConstValuePairBuilder {
    x.obj.Value = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftConstValuePair().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftConstValuePairBuilder) Emit() *ThriftConstValuePair {
    var objCopy ThriftConstValuePair = *x.obj
    return &objCopy
}

func (x *ThriftConstValuePair) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("ThriftConstValuePair"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ThriftConstValuePair) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // key
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.STRUCT)):  // value
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ThriftConstValuePair) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ThriftConstValuePair({")
    sb.WriteString(fmt.Sprintf("Key:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Value:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type ThriftConstValue struct {
    CvBool *bool `thrift:"cv_bool,1" json:"cv_bool,omitempty" db:"cv_bool"`
    CvInteger *int64 `thrift:"cv_integer,2" json:"cv_integer,omitempty" db:"cv_integer"`
    CvDouble *float64 `thrift:"cv_double,3" json:"cv_double,omitempty" db:"cv_double"`
    CvString *string `thrift:"cv_string,4" json:"cv_string,omitempty" db:"cv_string"`
    CvMap []*ThriftConstValuePair `thrift:"cv_map,5" json:"cv_map,omitempty" db:"cv_map"`
    CvList []*ThriftConstValue `thrift:"cv_list,6" json:"cv_list,omitempty" db:"cv_list"`
    CvStruct *ThriftConstStruct `thrift:"cv_struct,7" json:"cv_struct,omitempty" db:"cv_struct"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ThriftConstValue{}

func NewThriftConstValue() *ThriftConstValue {
    return (&ThriftConstValue{})
}

func (x *ThriftConstValue) GetCvBoolNonCompat() *bool {
    return x.CvBool
}

func (x *ThriftConstValue) GetCvBool() bool {
    if !x.IsSetCvBool() {
        return false
    }

    return *x.CvBool
}

func (x *ThriftConstValue) GetCvIntegerNonCompat() *int64 {
    return x.CvInteger
}

func (x *ThriftConstValue) GetCvInteger() int64 {
    if !x.IsSetCvInteger() {
        return 0
    }

    return *x.CvInteger
}

func (x *ThriftConstValue) GetCvDoubleNonCompat() *float64 {
    return x.CvDouble
}

func (x *ThriftConstValue) GetCvDouble() float64 {
    if !x.IsSetCvDouble() {
        return 0.0
    }

    return *x.CvDouble
}

func (x *ThriftConstValue) GetCvStringNonCompat() *string {
    return x.CvString
}

func (x *ThriftConstValue) GetCvString() string {
    if !x.IsSetCvString() {
        return ""
    }

    return *x.CvString
}

func (x *ThriftConstValue) GetCvMapNonCompat() []*ThriftConstValuePair {
    return x.CvMap
}

func (x *ThriftConstValue) GetCvMap() []*ThriftConstValuePair {
    if !x.IsSetCvMap() {
        return make([]*ThriftConstValuePair, 0)
    }

    return x.CvMap
}

func (x *ThriftConstValue) GetCvListNonCompat() []*ThriftConstValue {
    return x.CvList
}

func (x *ThriftConstValue) GetCvList() []*ThriftConstValue {
    if !x.IsSetCvList() {
        return make([]*ThriftConstValue, 0)
    }

    return x.CvList
}

func (x *ThriftConstValue) GetCvStructNonCompat() *ThriftConstStruct {
    return x.CvStruct
}

func (x *ThriftConstValue) GetCvStruct() *ThriftConstStruct {
    if !x.IsSetCvStruct() {
        return nil
    }

    return x.CvStruct
}

func (x *ThriftConstValue) SetCvBoolNonCompat(value bool) *ThriftConstValue {
    x.CvBool = &value
    return x
}

func (x *ThriftConstValue) SetCvBool(value *bool) *ThriftConstValue {
    x.CvBool = value
    return x
}

func (x *ThriftConstValue) SetCvIntegerNonCompat(value int64) *ThriftConstValue {
    x.CvInteger = &value
    return x
}

func (x *ThriftConstValue) SetCvInteger(value *int64) *ThriftConstValue {
    x.CvInteger = value
    return x
}

func (x *ThriftConstValue) SetCvDoubleNonCompat(value float64) *ThriftConstValue {
    x.CvDouble = &value
    return x
}

func (x *ThriftConstValue) SetCvDouble(value *float64) *ThriftConstValue {
    x.CvDouble = value
    return x
}

func (x *ThriftConstValue) SetCvStringNonCompat(value string) *ThriftConstValue {
    x.CvString = &value
    return x
}

func (x *ThriftConstValue) SetCvString(value *string) *ThriftConstValue {
    x.CvString = value
    return x
}

func (x *ThriftConstValue) SetCvMapNonCompat(value []*ThriftConstValuePair) *ThriftConstValue {
    x.CvMap = value
    return x
}

func (x *ThriftConstValue) SetCvMap(value []*ThriftConstValuePair) *ThriftConstValue {
    x.CvMap = value
    return x
}

func (x *ThriftConstValue) SetCvListNonCompat(value []*ThriftConstValue) *ThriftConstValue {
    x.CvList = value
    return x
}

func (x *ThriftConstValue) SetCvList(value []*ThriftConstValue) *ThriftConstValue {
    x.CvList = value
    return x
}

func (x *ThriftConstValue) SetCvStructNonCompat(value ThriftConstStruct) *ThriftConstValue {
    x.CvStruct = &value
    return x
}

func (x *ThriftConstValue) SetCvStruct(value *ThriftConstStruct) *ThriftConstValue {
    x.CvStruct = value
    return x
}

func (x *ThriftConstValue) IsSetCvBool() bool {
    return x != nil && x.CvBool != nil
}

func (x *ThriftConstValue) IsSetCvInteger() bool {
    return x != nil && x.CvInteger != nil
}

func (x *ThriftConstValue) IsSetCvDouble() bool {
    return x != nil && x.CvDouble != nil
}

func (x *ThriftConstValue) IsSetCvString() bool {
    return x != nil && x.CvString != nil
}

func (x *ThriftConstValue) IsSetCvMap() bool {
    return x != nil && x.CvMap != nil
}

func (x *ThriftConstValue) IsSetCvList() bool {
    return x != nil && x.CvList != nil
}

func (x *ThriftConstValue) IsSetCvStruct() bool {
    return x != nil && x.CvStruct != nil
}

func (x *ThriftConstValue) writeField1(p thrift.Format) error {  // CvBool
    if !x.IsSetCvBool() {
        return nil
    }

    if err := p.WriteFieldBegin("cv_bool", thrift.BOOL, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetCvBoolNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftConstValue) writeField2(p thrift.Format) error {  // CvInteger
    if !x.IsSetCvInteger() {
        return nil
    }

    if err := p.WriteFieldBegin("cv_integer", thrift.I64, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetCvIntegerNonCompat()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftConstValue) writeField3(p thrift.Format) error {  // CvDouble
    if !x.IsSetCvDouble() {
        return nil
    }

    if err := p.WriteFieldBegin("cv_double", thrift.DOUBLE, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetCvDoubleNonCompat()
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftConstValue) writeField4(p thrift.Format) error {  // CvString
    if !x.IsSetCvString() {
        return nil
    }

    if err := p.WriteFieldBegin("cv_string", thrift.STRING, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetCvStringNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftConstValue) writeField5(p thrift.Format) error {  // CvMap
    if !x.IsSetCvMap() {
        return nil
    }

    if err := p.WriteFieldBegin("cv_map", thrift.LIST, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetCvMapNonCompat()
    if err := p.WriteListBegin(thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftConstValue) writeField6(p thrift.Format) error {  // CvList
    if !x.IsSetCvList() {
        return nil
    }

    if err := p.WriteFieldBegin("cv_list", thrift.LIST, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetCvListNonCompat()
    if err := p.WriteListBegin(thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftConstValue) writeField7(p thrift.Format) error {  // CvStruct
    if !x.IsSetCvStruct() {
        return nil
    }

    if err := p.WriteFieldBegin("cv_struct", thrift.STRUCT, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetCvStructNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftConstValue) readField1(p thrift.Format) error {  // CvBool
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetCvBoolNonCompat(result)
    return nil
}

func (x *ThriftConstValue) readField2(p thrift.Format) error {  // CvInteger
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetCvIntegerNonCompat(result)
    return nil
}

func (x *ThriftConstValue) readField3(p thrift.Format) error {  // CvDouble
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.SetCvDoubleNonCompat(result)
    return nil
}

func (x *ThriftConstValue) readField4(p thrift.Format) error {  // CvString
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetCvStringNonCompat(result)
    return nil
}

func (x *ThriftConstValue) readField5(p thrift.Format) error {  // CvMap
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]*ThriftConstValuePair, 0, size)
for i := 0; i < size; i++ {
    var elem ThriftConstValuePair
    {
        result := *NewThriftConstValuePair()
err := result.Read(p)
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, &elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetCvMapNonCompat(result)
    return nil
}

func (x *ThriftConstValue) readField6(p thrift.Format) error {  // CvList
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]*ThriftConstValue, 0, size)
for i := 0; i < size; i++ {
    var elem ThriftConstValue
    {
        result := *NewThriftConstValue()
err := result.Read(p)
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, &elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetCvListNonCompat(result)
    return nil
}

func (x *ThriftConstValue) readField7(p thrift.Format) error {  // CvStruct
    result := *NewThriftConstStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetCvStructNonCompat(result)
    return nil
}

func (x *ThriftConstValue) toString1() string {  // CvBool
    if x.IsSetCvBool() {
        return fmt.Sprintf("%v", *x.GetCvBoolNonCompat())
    }
    return fmt.Sprintf("%v", x.GetCvBoolNonCompat())
}

func (x *ThriftConstValue) toString2() string {  // CvInteger
    if x.IsSetCvInteger() {
        return fmt.Sprintf("%v", *x.GetCvIntegerNonCompat())
    }
    return fmt.Sprintf("%v", x.GetCvIntegerNonCompat())
}

func (x *ThriftConstValue) toString3() string {  // CvDouble
    if x.IsSetCvDouble() {
        return fmt.Sprintf("%v", *x.GetCvDoubleNonCompat())
    }
    return fmt.Sprintf("%v", x.GetCvDoubleNonCompat())
}

func (x *ThriftConstValue) toString4() string {  // CvString
    if x.IsSetCvString() {
        return fmt.Sprintf("%v", *x.GetCvStringNonCompat())
    }
    return fmt.Sprintf("%v", x.GetCvStringNonCompat())
}

func (x *ThriftConstValue) toString5() string {  // CvMap
    return fmt.Sprintf("%v", x.GetCvMapNonCompat())
}

func (x *ThriftConstValue) toString6() string {  // CvList
    return fmt.Sprintf("%v", x.GetCvListNonCompat())
}

func (x *ThriftConstValue) toString7() string {  // CvStruct
    return fmt.Sprintf("%v", x.GetCvStructNonCompat())
}





// Deprecated: Use NewThriftConstValue().GetCvStruct() instead.
func (x *ThriftConstValue) DefaultGetCvStruct() *ThriftConstStruct {
    if !x.IsSetCvStruct() {
        return NewThriftConstStruct()
    }
    return x.CvStruct
}

func (x *ThriftConstValue) countSetFields() int {
    count := int(0)
    if (x.IsSetCvBool()) {
        count++
    }
    if (x.IsSetCvInteger()) {
        count++
    }
    if (x.IsSetCvDouble()) {
        count++
    }
    if (x.IsSetCvString()) {
        count++
    }
    if (x.IsSetCvMap()) {
        count++
    }
    if (x.IsSetCvList()) {
        count++
    }
    if (x.IsSetCvStruct()) {
        count++
    }
    return count
}

func (x *ThriftConstValue) CountSetFieldsThriftConstValue() int {
    return x.countSetFields()
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftConstValue().Set<FieldNameFoo>().Set<FieldNameBar>()
type ThriftConstValueBuilder struct {
    obj *ThriftConstValue
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftConstValue().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewThriftConstValueBuilder() *ThriftConstValueBuilder {
    return &ThriftConstValueBuilder{
        obj: NewThriftConstValue(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftConstValue().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftConstValueBuilder) CvBool(value *bool) *ThriftConstValueBuilder {
    x.obj.CvBool = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftConstValue().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftConstValueBuilder) CvInteger(value *int64) *ThriftConstValueBuilder {
    x.obj.CvInteger = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftConstValue().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftConstValueBuilder) CvDouble(value *float64) *ThriftConstValueBuilder {
    x.obj.CvDouble = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftConstValue().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftConstValueBuilder) CvString(value *string) *ThriftConstValueBuilder {
    x.obj.CvString = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftConstValue().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftConstValueBuilder) CvMap(value []*ThriftConstValuePair) *ThriftConstValueBuilder {
    x.obj.CvMap = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftConstValue().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftConstValueBuilder) CvList(value []*ThriftConstValue) *ThriftConstValueBuilder {
    x.obj.CvList = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftConstValue().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftConstValueBuilder) CvStruct(value *ThriftConstStruct) *ThriftConstValueBuilder {
    x.obj.CvStruct = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftConstValue().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftConstValueBuilder) Emit() *ThriftConstValue {
    var objCopy ThriftConstValue = *x.obj
    return &objCopy
}

func (x *ThriftConstValue) Write(p thrift.Format) error {
    if countSet := x.countSetFields(); countSet > 1 {
        return fmt.Errorf("%T write union: no more than one field must be set (%d set).", x, countSet)
    }
    if err := p.WriteStructBegin("ThriftConstValue"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ThriftConstValue) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.BOOL)):  // cv_bool
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.I64)):  // cv_integer
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.DOUBLE)):  // cv_double
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 4 && wireType == thrift.Type(thrift.STRING)):  // cv_string
            if err := x.readField4(p); err != nil {
                return err
            }
        case (id == 5 && wireType == thrift.Type(thrift.LIST)):  // cv_map
            if err := x.readField5(p); err != nil {
                return err
            }
        case (id == 6 && wireType == thrift.Type(thrift.LIST)):  // cv_list
            if err := x.readField6(p); err != nil {
                return err
            }
        case (id == 7 && wireType == thrift.Type(thrift.STRUCT)):  // cv_struct
            if err := x.readField7(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ThriftConstValue) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ThriftConstValue({")
    sb.WriteString(fmt.Sprintf("CvBool:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("CvInteger:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("CvDouble:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("CvString:%s ", x.toString4()))
    sb.WriteString(fmt.Sprintf("CvMap:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("CvList:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("CvStruct:%s", x.toString7()))
    sb.WriteString("})")

    return sb.String()
}

type ThriftConstStruct struct {
    Type *ThriftStructType `thrift:"type,1" json:"type" db:"type"`
    Fields map[string]*ThriftConstValue `thrift:"fields,2" json:"fields" db:"fields"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ThriftConstStruct{}

func NewThriftConstStruct() *ThriftConstStruct {
    return (&ThriftConstStruct{}).
        SetTypeNonCompat(*NewThriftStructType()).
        SetFieldsNonCompat(make(map[string]*ThriftConstValue))
}

func (x *ThriftConstStruct) GetTypeNonCompat() *ThriftStructType {
    return x.Type
}

func (x *ThriftConstStruct) GetType() *ThriftStructType {
    if !x.IsSetType() {
        return nil
    }

    return x.Type
}

func (x *ThriftConstStruct) GetFieldsNonCompat() map[string]*ThriftConstValue {
    return x.Fields
}

func (x *ThriftConstStruct) GetFields() map[string]*ThriftConstValue {
    if !x.IsSetFields() {
        return make(map[string]*ThriftConstValue)
    }

    return x.Fields
}

func (x *ThriftConstStruct) SetTypeNonCompat(value ThriftStructType) *ThriftConstStruct {
    x.Type = &value
    return x
}

func (x *ThriftConstStruct) SetType(value *ThriftStructType) *ThriftConstStruct {
    x.Type = value
    return x
}

func (x *ThriftConstStruct) SetFieldsNonCompat(value map[string]*ThriftConstValue) *ThriftConstStruct {
    x.Fields = value
    return x
}

func (x *ThriftConstStruct) SetFields(value map[string]*ThriftConstValue) *ThriftConstStruct {
    x.Fields = value
    return x
}

func (x *ThriftConstStruct) IsSetType() bool {
    return x != nil && x.Type != nil
}

func (x *ThriftConstStruct) IsSetFields() bool {
    return x != nil && x.Fields != nil
}

func (x *ThriftConstStruct) writeField1(p thrift.Format) error {  // Type
    if !x.IsSetType() {
        return nil
    }

    if err := p.WriteFieldBegin("type", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTypeNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftConstStruct) writeField2(p thrift.Format) error {  // Fields
    if err := p.WriteFieldBegin("fields", thrift.MAP, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetFieldsNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftConstStruct) readField1(p thrift.Format) error {  // Type
    result := *NewThriftStructType()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetTypeNonCompat(result)
    return nil
}

func (x *ThriftConstStruct) readField2(p thrift.Format) error {  // Fields
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*ThriftConstValue, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *ThriftConstValue
    {
        result := *NewThriftConstValue()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetFieldsNonCompat(result)
    return nil
}

func (x *ThriftConstStruct) toString1() string {  // Type
    return fmt.Sprintf("%v", x.GetTypeNonCompat())
}

func (x *ThriftConstStruct) toString2() string {  // Fields
    return fmt.Sprintf("%v", x.GetFieldsNonCompat())
}

// Deprecated: Use NewThriftConstStruct().GetType() instead.
func (x *ThriftConstStruct) DefaultGetType() *ThriftStructType {
    if !x.IsSetType() {
        return NewThriftStructType()
    }
    return x.Type
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftConstStruct().Set<FieldNameFoo>().Set<FieldNameBar>()
type ThriftConstStructBuilder struct {
    obj *ThriftConstStruct
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftConstStruct().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewThriftConstStructBuilder() *ThriftConstStructBuilder {
    return &ThriftConstStructBuilder{
        obj: NewThriftConstStruct(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftConstStruct().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftConstStructBuilder) Type(value *ThriftStructType) *ThriftConstStructBuilder {
    x.obj.Type = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftConstStruct().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftConstStructBuilder) Fields(value map[string]*ThriftConstValue) *ThriftConstStructBuilder {
    x.obj.Fields = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftConstStruct().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftConstStructBuilder) Emit() *ThriftConstStruct {
    var objCopy ThriftConstStruct = *x.obj
    return &objCopy
}

func (x *ThriftConstStruct) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("ThriftConstStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ThriftConstStruct) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // type
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.MAP)):  // fields
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ThriftConstStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ThriftConstStruct({")
    sb.WriteString(fmt.Sprintf("Type:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Fields:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type ThriftListType struct {
    ValueType *ThriftType `thrift:"valueType,1,optional" json:"valueType,omitempty" db:"valueType"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ThriftListType{}

func NewThriftListType() *ThriftListType {
    return (&ThriftListType{})
}

func (x *ThriftListType) GetValueTypeNonCompat() *ThriftType {
    return x.ValueType
}

func (x *ThriftListType) GetValueType() *ThriftType {
    if !x.IsSetValueType() {
        return nil
    }

    return x.ValueType
}

func (x *ThriftListType) SetValueTypeNonCompat(value ThriftType) *ThriftListType {
    x.ValueType = &value
    return x
}

func (x *ThriftListType) SetValueType(value *ThriftType) *ThriftListType {
    x.ValueType = value
    return x
}

func (x *ThriftListType) IsSetValueType() bool {
    return x != nil && x.ValueType != nil
}

func (x *ThriftListType) writeField1(p thrift.Format) error {  // ValueType
    if !x.IsSetValueType() {
        return nil
    }

    if err := p.WriteFieldBegin("valueType", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueTypeNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftListType) readField1(p thrift.Format) error {  // ValueType
    result := *NewThriftType()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetValueTypeNonCompat(result)
    return nil
}

func (x *ThriftListType) toString1() string {  // ValueType
    return fmt.Sprintf("%v", x.GetValueTypeNonCompat())
}

// Deprecated: Use NewThriftListType().GetValueType() instead.
func (x *ThriftListType) DefaultGetValueType() *ThriftType {
    if !x.IsSetValueType() {
        return NewThriftType()
    }
    return x.ValueType
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftListType().Set<FieldNameFoo>().Set<FieldNameBar>()
type ThriftListTypeBuilder struct {
    obj *ThriftListType
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftListType().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewThriftListTypeBuilder() *ThriftListTypeBuilder {
    return &ThriftListTypeBuilder{
        obj: NewThriftListType(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftListType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftListTypeBuilder) ValueType(value *ThriftType) *ThriftListTypeBuilder {
    x.obj.ValueType = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftListType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftListTypeBuilder) Emit() *ThriftListType {
    var objCopy ThriftListType = *x.obj
    return &objCopy
}

func (x *ThriftListType) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("ThriftListType"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ThriftListType) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // valueType
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ThriftListType) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ThriftListType({")
    sb.WriteString(fmt.Sprintf("ValueType:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}

type ThriftSetType struct {
    ValueType *ThriftType `thrift:"valueType,1,optional" json:"valueType,omitempty" db:"valueType"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ThriftSetType{}

func NewThriftSetType() *ThriftSetType {
    return (&ThriftSetType{})
}

func (x *ThriftSetType) GetValueTypeNonCompat() *ThriftType {
    return x.ValueType
}

func (x *ThriftSetType) GetValueType() *ThriftType {
    if !x.IsSetValueType() {
        return nil
    }

    return x.ValueType
}

func (x *ThriftSetType) SetValueTypeNonCompat(value ThriftType) *ThriftSetType {
    x.ValueType = &value
    return x
}

func (x *ThriftSetType) SetValueType(value *ThriftType) *ThriftSetType {
    x.ValueType = value
    return x
}

func (x *ThriftSetType) IsSetValueType() bool {
    return x != nil && x.ValueType != nil
}

func (x *ThriftSetType) writeField1(p thrift.Format) error {  // ValueType
    if !x.IsSetValueType() {
        return nil
    }

    if err := p.WriteFieldBegin("valueType", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueTypeNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftSetType) readField1(p thrift.Format) error {  // ValueType
    result := *NewThriftType()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetValueTypeNonCompat(result)
    return nil
}

func (x *ThriftSetType) toString1() string {  // ValueType
    return fmt.Sprintf("%v", x.GetValueTypeNonCompat())
}

// Deprecated: Use NewThriftSetType().GetValueType() instead.
func (x *ThriftSetType) DefaultGetValueType() *ThriftType {
    if !x.IsSetValueType() {
        return NewThriftType()
    }
    return x.ValueType
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftSetType().Set<FieldNameFoo>().Set<FieldNameBar>()
type ThriftSetTypeBuilder struct {
    obj *ThriftSetType
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftSetType().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewThriftSetTypeBuilder() *ThriftSetTypeBuilder {
    return &ThriftSetTypeBuilder{
        obj: NewThriftSetType(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftSetType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftSetTypeBuilder) ValueType(value *ThriftType) *ThriftSetTypeBuilder {
    x.obj.ValueType = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftSetType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftSetTypeBuilder) Emit() *ThriftSetType {
    var objCopy ThriftSetType = *x.obj
    return &objCopy
}

func (x *ThriftSetType) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("ThriftSetType"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ThriftSetType) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // valueType
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ThriftSetType) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ThriftSetType({")
    sb.WriteString(fmt.Sprintf("ValueType:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}

type ThriftMapType struct {
    KeyType *ThriftType `thrift:"keyType,1,optional" json:"keyType,omitempty" db:"keyType"`
    ValueType *ThriftType `thrift:"valueType,2,optional" json:"valueType,omitempty" db:"valueType"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ThriftMapType{}

func NewThriftMapType() *ThriftMapType {
    return (&ThriftMapType{})
}

func (x *ThriftMapType) GetKeyTypeNonCompat() *ThriftType {
    return x.KeyType
}

func (x *ThriftMapType) GetKeyType() *ThriftType {
    if !x.IsSetKeyType() {
        return nil
    }

    return x.KeyType
}

func (x *ThriftMapType) GetValueTypeNonCompat() *ThriftType {
    return x.ValueType
}

func (x *ThriftMapType) GetValueType() *ThriftType {
    if !x.IsSetValueType() {
        return nil
    }

    return x.ValueType
}

func (x *ThriftMapType) SetKeyTypeNonCompat(value ThriftType) *ThriftMapType {
    x.KeyType = &value
    return x
}

func (x *ThriftMapType) SetKeyType(value *ThriftType) *ThriftMapType {
    x.KeyType = value
    return x
}

func (x *ThriftMapType) SetValueTypeNonCompat(value ThriftType) *ThriftMapType {
    x.ValueType = &value
    return x
}

func (x *ThriftMapType) SetValueType(value *ThriftType) *ThriftMapType {
    x.ValueType = value
    return x
}

func (x *ThriftMapType) IsSetKeyType() bool {
    return x != nil && x.KeyType != nil
}

func (x *ThriftMapType) IsSetValueType() bool {
    return x != nil && x.ValueType != nil
}

func (x *ThriftMapType) writeField1(p thrift.Format) error {  // KeyType
    if !x.IsSetKeyType() {
        return nil
    }

    if err := p.WriteFieldBegin("keyType", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetKeyTypeNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftMapType) writeField2(p thrift.Format) error {  // ValueType
    if !x.IsSetValueType() {
        return nil
    }

    if err := p.WriteFieldBegin("valueType", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueTypeNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftMapType) readField1(p thrift.Format) error {  // KeyType
    result := *NewThriftType()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetKeyTypeNonCompat(result)
    return nil
}

func (x *ThriftMapType) readField2(p thrift.Format) error {  // ValueType
    result := *NewThriftType()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetValueTypeNonCompat(result)
    return nil
}

func (x *ThriftMapType) toString1() string {  // KeyType
    return fmt.Sprintf("%v", x.GetKeyTypeNonCompat())
}

func (x *ThriftMapType) toString2() string {  // ValueType
    return fmt.Sprintf("%v", x.GetValueTypeNonCompat())
}

// Deprecated: Use NewThriftMapType().GetKeyType() instead.
func (x *ThriftMapType) DefaultGetKeyType() *ThriftType {
    if !x.IsSetKeyType() {
        return NewThriftType()
    }
    return x.KeyType
}

// Deprecated: Use NewThriftMapType().GetValueType() instead.
func (x *ThriftMapType) DefaultGetValueType() *ThriftType {
    if !x.IsSetValueType() {
        return NewThriftType()
    }
    return x.ValueType
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftMapType().Set<FieldNameFoo>().Set<FieldNameBar>()
type ThriftMapTypeBuilder struct {
    obj *ThriftMapType
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftMapType().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewThriftMapTypeBuilder() *ThriftMapTypeBuilder {
    return &ThriftMapTypeBuilder{
        obj: NewThriftMapType(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftMapType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftMapTypeBuilder) KeyType(value *ThriftType) *ThriftMapTypeBuilder {
    x.obj.KeyType = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftMapType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftMapTypeBuilder) ValueType(value *ThriftType) *ThriftMapTypeBuilder {
    x.obj.ValueType = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftMapType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftMapTypeBuilder) Emit() *ThriftMapType {
    var objCopy ThriftMapType = *x.obj
    return &objCopy
}

func (x *ThriftMapType) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("ThriftMapType"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ThriftMapType) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // keyType
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.STRUCT)):  // valueType
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ThriftMapType) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ThriftMapType({")
    sb.WriteString(fmt.Sprintf("KeyType:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("ValueType:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type ThriftEnumType struct {
    Name string `thrift:"name,1" json:"name" db:"name"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ThriftEnumType{}

func NewThriftEnumType() *ThriftEnumType {
    return (&ThriftEnumType{}).
        SetNameNonCompat("")
}

func (x *ThriftEnumType) GetNameNonCompat() string {
    return x.Name
}

func (x *ThriftEnumType) GetName() string {
    return x.Name
}

func (x *ThriftEnumType) SetNameNonCompat(value string) *ThriftEnumType {
    x.Name = value
    return x
}

func (x *ThriftEnumType) SetName(value string) *ThriftEnumType {
    x.Name = value
    return x
}

func (x *ThriftEnumType) writeField1(p thrift.Format) error {  // Name
    if err := p.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetNameNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftEnumType) readField1(p thrift.Format) error {  // Name
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetNameNonCompat(result)
    return nil
}

func (x *ThriftEnumType) toString1() string {  // Name
    return fmt.Sprintf("%v", x.GetNameNonCompat())
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftEnumType().Set<FieldNameFoo>().Set<FieldNameBar>()
type ThriftEnumTypeBuilder struct {
    obj *ThriftEnumType
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftEnumType().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewThriftEnumTypeBuilder() *ThriftEnumTypeBuilder {
    return &ThriftEnumTypeBuilder{
        obj: NewThriftEnumType(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftEnumType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftEnumTypeBuilder) Name(value string) *ThriftEnumTypeBuilder {
    x.obj.Name = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftEnumType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftEnumTypeBuilder) Emit() *ThriftEnumType {
    var objCopy ThriftEnumType = *x.obj
    return &objCopy
}

func (x *ThriftEnumType) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("ThriftEnumType"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ThriftEnumType) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // name
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ThriftEnumType) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ThriftEnumType({")
    sb.WriteString(fmt.Sprintf("Name:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}

type ThriftStructType struct {
    Name string `thrift:"name,1" json:"name" db:"name"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ThriftStructType{}

func NewThriftStructType() *ThriftStructType {
    return (&ThriftStructType{}).
        SetNameNonCompat("")
}

func (x *ThriftStructType) GetNameNonCompat() string {
    return x.Name
}

func (x *ThriftStructType) GetName() string {
    return x.Name
}

func (x *ThriftStructType) SetNameNonCompat(value string) *ThriftStructType {
    x.Name = value
    return x
}

func (x *ThriftStructType) SetName(value string) *ThriftStructType {
    x.Name = value
    return x
}

func (x *ThriftStructType) writeField1(p thrift.Format) error {  // Name
    if err := p.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetNameNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftStructType) readField1(p thrift.Format) error {  // Name
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetNameNonCompat(result)
    return nil
}

func (x *ThriftStructType) toString1() string {  // Name
    return fmt.Sprintf("%v", x.GetNameNonCompat())
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftStructType().Set<FieldNameFoo>().Set<FieldNameBar>()
type ThriftStructTypeBuilder struct {
    obj *ThriftStructType
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftStructType().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewThriftStructTypeBuilder() *ThriftStructTypeBuilder {
    return &ThriftStructTypeBuilder{
        obj: NewThriftStructType(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftStructType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftStructTypeBuilder) Name(value string) *ThriftStructTypeBuilder {
    x.obj.Name = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftStructType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftStructTypeBuilder) Emit() *ThriftStructType {
    var objCopy ThriftStructType = *x.obj
    return &objCopy
}

func (x *ThriftStructType) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("ThriftStructType"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ThriftStructType) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // name
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ThriftStructType) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ThriftStructType({")
    sb.WriteString(fmt.Sprintf("Name:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}

type ThriftUnionType struct {
    Name string `thrift:"name,1" json:"name" db:"name"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ThriftUnionType{}

func NewThriftUnionType() *ThriftUnionType {
    return (&ThriftUnionType{}).
        SetNameNonCompat("")
}

func (x *ThriftUnionType) GetNameNonCompat() string {
    return x.Name
}

func (x *ThriftUnionType) GetName() string {
    return x.Name
}

func (x *ThriftUnionType) SetNameNonCompat(value string) *ThriftUnionType {
    x.Name = value
    return x
}

func (x *ThriftUnionType) SetName(value string) *ThriftUnionType {
    x.Name = value
    return x
}

func (x *ThriftUnionType) writeField1(p thrift.Format) error {  // Name
    if err := p.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetNameNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftUnionType) readField1(p thrift.Format) error {  // Name
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetNameNonCompat(result)
    return nil
}

func (x *ThriftUnionType) toString1() string {  // Name
    return fmt.Sprintf("%v", x.GetNameNonCompat())
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftUnionType().Set<FieldNameFoo>().Set<FieldNameBar>()
type ThriftUnionTypeBuilder struct {
    obj *ThriftUnionType
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftUnionType().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewThriftUnionTypeBuilder() *ThriftUnionTypeBuilder {
    return &ThriftUnionTypeBuilder{
        obj: NewThriftUnionType(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftUnionType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftUnionTypeBuilder) Name(value string) *ThriftUnionTypeBuilder {
    x.obj.Name = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftUnionType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftUnionTypeBuilder) Emit() *ThriftUnionType {
    var objCopy ThriftUnionType = *x.obj
    return &objCopy
}

func (x *ThriftUnionType) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("ThriftUnionType"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ThriftUnionType) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // name
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ThriftUnionType) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ThriftUnionType({")
    sb.WriteString(fmt.Sprintf("Name:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}

type ThriftTypedefType struct {
    Name string `thrift:"name,1" json:"name" db:"name"`
    UnderlyingType *ThriftType `thrift:"underlyingType,2,optional" json:"underlyingType,omitempty" db:"underlyingType"`
    StructuredAnnotations []*ThriftConstStruct `thrift:"structured_annotations,3" json:"structured_annotations" db:"structured_annotations"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ThriftTypedefType{}

func NewThriftTypedefType() *ThriftTypedefType {
    return (&ThriftTypedefType{}).
        SetNameNonCompat("").
        SetStructuredAnnotationsNonCompat(make([]*ThriftConstStruct, 0))
}

func (x *ThriftTypedefType) GetNameNonCompat() string {
    return x.Name
}

func (x *ThriftTypedefType) GetName() string {
    return x.Name
}

func (x *ThriftTypedefType) GetUnderlyingTypeNonCompat() *ThriftType {
    return x.UnderlyingType
}

func (x *ThriftTypedefType) GetUnderlyingType() *ThriftType {
    if !x.IsSetUnderlyingType() {
        return nil
    }

    return x.UnderlyingType
}

func (x *ThriftTypedefType) GetStructuredAnnotationsNonCompat() []*ThriftConstStruct {
    return x.StructuredAnnotations
}

func (x *ThriftTypedefType) GetStructuredAnnotations() []*ThriftConstStruct {
    if !x.IsSetStructuredAnnotations() {
        return make([]*ThriftConstStruct, 0)
    }

    return x.StructuredAnnotations
}

func (x *ThriftTypedefType) SetNameNonCompat(value string) *ThriftTypedefType {
    x.Name = value
    return x
}

func (x *ThriftTypedefType) SetName(value string) *ThriftTypedefType {
    x.Name = value
    return x
}

func (x *ThriftTypedefType) SetUnderlyingTypeNonCompat(value ThriftType) *ThriftTypedefType {
    x.UnderlyingType = &value
    return x
}

func (x *ThriftTypedefType) SetUnderlyingType(value *ThriftType) *ThriftTypedefType {
    x.UnderlyingType = value
    return x
}

func (x *ThriftTypedefType) SetStructuredAnnotationsNonCompat(value []*ThriftConstStruct) *ThriftTypedefType {
    x.StructuredAnnotations = value
    return x
}

func (x *ThriftTypedefType) SetStructuredAnnotations(value []*ThriftConstStruct) *ThriftTypedefType {
    x.StructuredAnnotations = value
    return x
}

func (x *ThriftTypedefType) IsSetUnderlyingType() bool {
    return x != nil && x.UnderlyingType != nil
}

func (x *ThriftTypedefType) IsSetStructuredAnnotations() bool {
    return x != nil && x.StructuredAnnotations != nil
}

func (x *ThriftTypedefType) writeField1(p thrift.Format) error {  // Name
    if err := p.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetNameNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftTypedefType) writeField2(p thrift.Format) error {  // UnderlyingType
    if !x.IsSetUnderlyingType() {
        return nil
    }

    if err := p.WriteFieldBegin("underlyingType", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetUnderlyingTypeNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftTypedefType) writeField3(p thrift.Format) error {  // StructuredAnnotations
    if err := p.WriteFieldBegin("structured_annotations", thrift.LIST, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStructuredAnnotationsNonCompat()
    if err := p.WriteListBegin(thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftTypedefType) readField1(p thrift.Format) error {  // Name
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetNameNonCompat(result)
    return nil
}

func (x *ThriftTypedefType) readField2(p thrift.Format) error {  // UnderlyingType
    result := *NewThriftType()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetUnderlyingTypeNonCompat(result)
    return nil
}

func (x *ThriftTypedefType) readField3(p thrift.Format) error {  // StructuredAnnotations
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]*ThriftConstStruct, 0, size)
for i := 0; i < size; i++ {
    var elem ThriftConstStruct
    {
        result := *NewThriftConstStruct()
err := result.Read(p)
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, &elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetStructuredAnnotationsNonCompat(result)
    return nil
}

func (x *ThriftTypedefType) toString1() string {  // Name
    return fmt.Sprintf("%v", x.GetNameNonCompat())
}

func (x *ThriftTypedefType) toString2() string {  // UnderlyingType
    return fmt.Sprintf("%v", x.GetUnderlyingTypeNonCompat())
}

func (x *ThriftTypedefType) toString3() string {  // StructuredAnnotations
    return fmt.Sprintf("%v", x.GetStructuredAnnotationsNonCompat())
}

// Deprecated: Use NewThriftTypedefType().GetUnderlyingType() instead.
func (x *ThriftTypedefType) DefaultGetUnderlyingType() *ThriftType {
    if !x.IsSetUnderlyingType() {
        return NewThriftType()
    }
    return x.UnderlyingType
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftTypedefType().Set<FieldNameFoo>().Set<FieldNameBar>()
type ThriftTypedefTypeBuilder struct {
    obj *ThriftTypedefType
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftTypedefType().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewThriftTypedefTypeBuilder() *ThriftTypedefTypeBuilder {
    return &ThriftTypedefTypeBuilder{
        obj: NewThriftTypedefType(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftTypedefType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftTypedefTypeBuilder) Name(value string) *ThriftTypedefTypeBuilder {
    x.obj.Name = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftTypedefType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftTypedefTypeBuilder) UnderlyingType(value *ThriftType) *ThriftTypedefTypeBuilder {
    x.obj.UnderlyingType = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftTypedefType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftTypedefTypeBuilder) StructuredAnnotations(value []*ThriftConstStruct) *ThriftTypedefTypeBuilder {
    x.obj.StructuredAnnotations = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftTypedefType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftTypedefTypeBuilder) Emit() *ThriftTypedefType {
    var objCopy ThriftTypedefType = *x.obj
    return &objCopy
}

func (x *ThriftTypedefType) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("ThriftTypedefType"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ThriftTypedefType) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // name
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.STRUCT)):  // underlyingType
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.LIST)):  // structured_annotations
            if err := x.readField3(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ThriftTypedefType) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ThriftTypedefType({")
    sb.WriteString(fmt.Sprintf("Name:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("UnderlyingType:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("StructuredAnnotations:%s", x.toString3()))
    sb.WriteString("})")

    return sb.String()
}

type ThriftStreamType struct {
    ElemType *ThriftType `thrift:"elemType,1,optional" json:"elemType,omitempty" db:"elemType"`
    InitialResponseType *ThriftType `thrift:"initialResponseType,2,optional" json:"initialResponseType,omitempty" db:"initialResponseType"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ThriftStreamType{}

func NewThriftStreamType() *ThriftStreamType {
    return (&ThriftStreamType{})
}

func (x *ThriftStreamType) GetElemTypeNonCompat() *ThriftType {
    return x.ElemType
}

func (x *ThriftStreamType) GetElemType() *ThriftType {
    if !x.IsSetElemType() {
        return nil
    }

    return x.ElemType
}

func (x *ThriftStreamType) GetInitialResponseTypeNonCompat() *ThriftType {
    return x.InitialResponseType
}

func (x *ThriftStreamType) GetInitialResponseType() *ThriftType {
    if !x.IsSetInitialResponseType() {
        return nil
    }

    return x.InitialResponseType
}

func (x *ThriftStreamType) SetElemTypeNonCompat(value ThriftType) *ThriftStreamType {
    x.ElemType = &value
    return x
}

func (x *ThriftStreamType) SetElemType(value *ThriftType) *ThriftStreamType {
    x.ElemType = value
    return x
}

func (x *ThriftStreamType) SetInitialResponseTypeNonCompat(value ThriftType) *ThriftStreamType {
    x.InitialResponseType = &value
    return x
}

func (x *ThriftStreamType) SetInitialResponseType(value *ThriftType) *ThriftStreamType {
    x.InitialResponseType = value
    return x
}

func (x *ThriftStreamType) IsSetElemType() bool {
    return x != nil && x.ElemType != nil
}

func (x *ThriftStreamType) IsSetInitialResponseType() bool {
    return x != nil && x.InitialResponseType != nil
}

func (x *ThriftStreamType) writeField1(p thrift.Format) error {  // ElemType
    if !x.IsSetElemType() {
        return nil
    }

    if err := p.WriteFieldBegin("elemType", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetElemTypeNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftStreamType) writeField2(p thrift.Format) error {  // InitialResponseType
    if !x.IsSetInitialResponseType() {
        return nil
    }

    if err := p.WriteFieldBegin("initialResponseType", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetInitialResponseTypeNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftStreamType) readField1(p thrift.Format) error {  // ElemType
    result := *NewThriftType()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetElemTypeNonCompat(result)
    return nil
}

func (x *ThriftStreamType) readField2(p thrift.Format) error {  // InitialResponseType
    result := *NewThriftType()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetInitialResponseTypeNonCompat(result)
    return nil
}

func (x *ThriftStreamType) toString1() string {  // ElemType
    return fmt.Sprintf("%v", x.GetElemTypeNonCompat())
}

func (x *ThriftStreamType) toString2() string {  // InitialResponseType
    return fmt.Sprintf("%v", x.GetInitialResponseTypeNonCompat())
}

// Deprecated: Use NewThriftStreamType().GetElemType() instead.
func (x *ThriftStreamType) DefaultGetElemType() *ThriftType {
    if !x.IsSetElemType() {
        return NewThriftType()
    }
    return x.ElemType
}

// Deprecated: Use NewThriftStreamType().GetInitialResponseType() instead.
func (x *ThriftStreamType) DefaultGetInitialResponseType() *ThriftType {
    if !x.IsSetInitialResponseType() {
        return NewThriftType()
    }
    return x.InitialResponseType
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftStreamType().Set<FieldNameFoo>().Set<FieldNameBar>()
type ThriftStreamTypeBuilder struct {
    obj *ThriftStreamType
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftStreamType().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewThriftStreamTypeBuilder() *ThriftStreamTypeBuilder {
    return &ThriftStreamTypeBuilder{
        obj: NewThriftStreamType(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftStreamType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftStreamTypeBuilder) ElemType(value *ThriftType) *ThriftStreamTypeBuilder {
    x.obj.ElemType = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftStreamType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftStreamTypeBuilder) InitialResponseType(value *ThriftType) *ThriftStreamTypeBuilder {
    x.obj.InitialResponseType = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftStreamType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftStreamTypeBuilder) Emit() *ThriftStreamType {
    var objCopy ThriftStreamType = *x.obj
    return &objCopy
}

func (x *ThriftStreamType) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("ThriftStreamType"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ThriftStreamType) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // elemType
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.STRUCT)):  // initialResponseType
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ThriftStreamType) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ThriftStreamType({")
    sb.WriteString(fmt.Sprintf("ElemType:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("InitialResponseType:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type ThriftSinkType struct {
    ElemType *ThriftType `thrift:"elemType,1,optional" json:"elemType,omitempty" db:"elemType"`
    FinalResponseType *ThriftType `thrift:"finalResponseType,2,optional" json:"finalResponseType,omitempty" db:"finalResponseType"`
    InitialResponseType *ThriftType `thrift:"initialResponseType,3,optional" json:"initialResponseType,omitempty" db:"initialResponseType"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ThriftSinkType{}

func NewThriftSinkType() *ThriftSinkType {
    return (&ThriftSinkType{})
}

func (x *ThriftSinkType) GetElemTypeNonCompat() *ThriftType {
    return x.ElemType
}

func (x *ThriftSinkType) GetElemType() *ThriftType {
    if !x.IsSetElemType() {
        return nil
    }

    return x.ElemType
}

func (x *ThriftSinkType) GetFinalResponseTypeNonCompat() *ThriftType {
    return x.FinalResponseType
}

func (x *ThriftSinkType) GetFinalResponseType() *ThriftType {
    if !x.IsSetFinalResponseType() {
        return nil
    }

    return x.FinalResponseType
}

func (x *ThriftSinkType) GetInitialResponseTypeNonCompat() *ThriftType {
    return x.InitialResponseType
}

func (x *ThriftSinkType) GetInitialResponseType() *ThriftType {
    if !x.IsSetInitialResponseType() {
        return nil
    }

    return x.InitialResponseType
}

func (x *ThriftSinkType) SetElemTypeNonCompat(value ThriftType) *ThriftSinkType {
    x.ElemType = &value
    return x
}

func (x *ThriftSinkType) SetElemType(value *ThriftType) *ThriftSinkType {
    x.ElemType = value
    return x
}

func (x *ThriftSinkType) SetFinalResponseTypeNonCompat(value ThriftType) *ThriftSinkType {
    x.FinalResponseType = &value
    return x
}

func (x *ThriftSinkType) SetFinalResponseType(value *ThriftType) *ThriftSinkType {
    x.FinalResponseType = value
    return x
}

func (x *ThriftSinkType) SetInitialResponseTypeNonCompat(value ThriftType) *ThriftSinkType {
    x.InitialResponseType = &value
    return x
}

func (x *ThriftSinkType) SetInitialResponseType(value *ThriftType) *ThriftSinkType {
    x.InitialResponseType = value
    return x
}

func (x *ThriftSinkType) IsSetElemType() bool {
    return x != nil && x.ElemType != nil
}

func (x *ThriftSinkType) IsSetFinalResponseType() bool {
    return x != nil && x.FinalResponseType != nil
}

func (x *ThriftSinkType) IsSetInitialResponseType() bool {
    return x != nil && x.InitialResponseType != nil
}

func (x *ThriftSinkType) writeField1(p thrift.Format) error {  // ElemType
    if !x.IsSetElemType() {
        return nil
    }

    if err := p.WriteFieldBegin("elemType", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetElemTypeNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftSinkType) writeField2(p thrift.Format) error {  // FinalResponseType
    if !x.IsSetFinalResponseType() {
        return nil
    }

    if err := p.WriteFieldBegin("finalResponseType", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetFinalResponseTypeNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftSinkType) writeField3(p thrift.Format) error {  // InitialResponseType
    if !x.IsSetInitialResponseType() {
        return nil
    }

    if err := p.WriteFieldBegin("initialResponseType", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetInitialResponseTypeNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftSinkType) readField1(p thrift.Format) error {  // ElemType
    result := *NewThriftType()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetElemTypeNonCompat(result)
    return nil
}

func (x *ThriftSinkType) readField2(p thrift.Format) error {  // FinalResponseType
    result := *NewThriftType()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetFinalResponseTypeNonCompat(result)
    return nil
}

func (x *ThriftSinkType) readField3(p thrift.Format) error {  // InitialResponseType
    result := *NewThriftType()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetInitialResponseTypeNonCompat(result)
    return nil
}

func (x *ThriftSinkType) toString1() string {  // ElemType
    return fmt.Sprintf("%v", x.GetElemTypeNonCompat())
}

func (x *ThriftSinkType) toString2() string {  // FinalResponseType
    return fmt.Sprintf("%v", x.GetFinalResponseTypeNonCompat())
}

func (x *ThriftSinkType) toString3() string {  // InitialResponseType
    return fmt.Sprintf("%v", x.GetInitialResponseTypeNonCompat())
}

// Deprecated: Use NewThriftSinkType().GetElemType() instead.
func (x *ThriftSinkType) DefaultGetElemType() *ThriftType {
    if !x.IsSetElemType() {
        return NewThriftType()
    }
    return x.ElemType
}

// Deprecated: Use NewThriftSinkType().GetFinalResponseType() instead.
func (x *ThriftSinkType) DefaultGetFinalResponseType() *ThriftType {
    if !x.IsSetFinalResponseType() {
        return NewThriftType()
    }
    return x.FinalResponseType
}

// Deprecated: Use NewThriftSinkType().GetInitialResponseType() instead.
func (x *ThriftSinkType) DefaultGetInitialResponseType() *ThriftType {
    if !x.IsSetInitialResponseType() {
        return NewThriftType()
    }
    return x.InitialResponseType
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftSinkType().Set<FieldNameFoo>().Set<FieldNameBar>()
type ThriftSinkTypeBuilder struct {
    obj *ThriftSinkType
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftSinkType().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewThriftSinkTypeBuilder() *ThriftSinkTypeBuilder {
    return &ThriftSinkTypeBuilder{
        obj: NewThriftSinkType(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftSinkType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftSinkTypeBuilder) ElemType(value *ThriftType) *ThriftSinkTypeBuilder {
    x.obj.ElemType = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftSinkType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftSinkTypeBuilder) FinalResponseType(value *ThriftType) *ThriftSinkTypeBuilder {
    x.obj.FinalResponseType = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftSinkType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftSinkTypeBuilder) InitialResponseType(value *ThriftType) *ThriftSinkTypeBuilder {
    x.obj.InitialResponseType = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftSinkType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftSinkTypeBuilder) Emit() *ThriftSinkType {
    var objCopy ThriftSinkType = *x.obj
    return &objCopy
}

func (x *ThriftSinkType) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("ThriftSinkType"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ThriftSinkType) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // elemType
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.STRUCT)):  // finalResponseType
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.STRUCT)):  // initialResponseType
            if err := x.readField3(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ThriftSinkType) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ThriftSinkType({")
    sb.WriteString(fmt.Sprintf("ElemType:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("FinalResponseType:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("InitialResponseType:%s", x.toString3()))
    sb.WriteString("})")

    return sb.String()
}

type ThriftType struct {
    TPrimitive *ThriftPrimitiveType `thrift:"t_primitive,1" json:"t_primitive,omitempty" db:"t_primitive"`
    TList *ThriftListType `thrift:"t_list,2" json:"t_list,omitempty" db:"t_list"`
    TSet *ThriftSetType `thrift:"t_set,3" json:"t_set,omitempty" db:"t_set"`
    TMap *ThriftMapType `thrift:"t_map,4" json:"t_map,omitempty" db:"t_map"`
    TEnum *ThriftEnumType `thrift:"t_enum,5" json:"t_enum,omitempty" db:"t_enum"`
    TStruct *ThriftStructType `thrift:"t_struct,6" json:"t_struct,omitempty" db:"t_struct"`
    TUnion *ThriftUnionType `thrift:"t_union,7" json:"t_union,omitempty" db:"t_union"`
    TTypedef *ThriftTypedefType `thrift:"t_typedef,8" json:"t_typedef,omitempty" db:"t_typedef"`
    TStream *ThriftStreamType `thrift:"t_stream,9" json:"t_stream,omitempty" db:"t_stream"`
    TSink *ThriftSinkType `thrift:"t_sink,10" json:"t_sink,omitempty" db:"t_sink"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ThriftType{}

func NewThriftType() *ThriftType {
    return (&ThriftType{})
}

func (x *ThriftType) GetTPrimitiveNonCompat() *ThriftPrimitiveType {
    return x.TPrimitive
}

func (x *ThriftType) GetTPrimitive() ThriftPrimitiveType {
    if !x.IsSetTPrimitive() {
        return 0
    }

    return *x.TPrimitive
}

func (x *ThriftType) GetTListNonCompat() *ThriftListType {
    return x.TList
}

func (x *ThriftType) GetTList() *ThriftListType {
    if !x.IsSetTList() {
        return nil
    }

    return x.TList
}

func (x *ThriftType) GetTSetNonCompat() *ThriftSetType {
    return x.TSet
}

func (x *ThriftType) GetTSet() *ThriftSetType {
    if !x.IsSetTSet() {
        return nil
    }

    return x.TSet
}

func (x *ThriftType) GetTMapNonCompat() *ThriftMapType {
    return x.TMap
}

func (x *ThriftType) GetTMap() *ThriftMapType {
    if !x.IsSetTMap() {
        return nil
    }

    return x.TMap
}

func (x *ThriftType) GetTEnumNonCompat() *ThriftEnumType {
    return x.TEnum
}

func (x *ThriftType) GetTEnum() *ThriftEnumType {
    if !x.IsSetTEnum() {
        return nil
    }

    return x.TEnum
}

func (x *ThriftType) GetTStructNonCompat() *ThriftStructType {
    return x.TStruct
}

func (x *ThriftType) GetTStruct() *ThriftStructType {
    if !x.IsSetTStruct() {
        return nil
    }

    return x.TStruct
}

func (x *ThriftType) GetTUnionNonCompat() *ThriftUnionType {
    return x.TUnion
}

func (x *ThriftType) GetTUnion() *ThriftUnionType {
    if !x.IsSetTUnion() {
        return nil
    }

    return x.TUnion
}

func (x *ThriftType) GetTTypedefNonCompat() *ThriftTypedefType {
    return x.TTypedef
}

func (x *ThriftType) GetTTypedef() *ThriftTypedefType {
    if !x.IsSetTTypedef() {
        return nil
    }

    return x.TTypedef
}

func (x *ThriftType) GetTStreamNonCompat() *ThriftStreamType {
    return x.TStream
}

func (x *ThriftType) GetTStream() *ThriftStreamType {
    if !x.IsSetTStream() {
        return nil
    }

    return x.TStream
}

func (x *ThriftType) GetTSinkNonCompat() *ThriftSinkType {
    return x.TSink
}

func (x *ThriftType) GetTSink() *ThriftSinkType {
    if !x.IsSetTSink() {
        return nil
    }

    return x.TSink
}

func (x *ThriftType) SetTPrimitiveNonCompat(value ThriftPrimitiveType) *ThriftType {
    x.TPrimitive = &value
    return x
}

func (x *ThriftType) SetTPrimitive(value *ThriftPrimitiveType) *ThriftType {
    x.TPrimitive = value
    return x
}

func (x *ThriftType) SetTListNonCompat(value ThriftListType) *ThriftType {
    x.TList = &value
    return x
}

func (x *ThriftType) SetTList(value *ThriftListType) *ThriftType {
    x.TList = value
    return x
}

func (x *ThriftType) SetTSetNonCompat(value ThriftSetType) *ThriftType {
    x.TSet = &value
    return x
}

func (x *ThriftType) SetTSet(value *ThriftSetType) *ThriftType {
    x.TSet = value
    return x
}

func (x *ThriftType) SetTMapNonCompat(value ThriftMapType) *ThriftType {
    x.TMap = &value
    return x
}

func (x *ThriftType) SetTMap(value *ThriftMapType) *ThriftType {
    x.TMap = value
    return x
}

func (x *ThriftType) SetTEnumNonCompat(value ThriftEnumType) *ThriftType {
    x.TEnum = &value
    return x
}

func (x *ThriftType) SetTEnum(value *ThriftEnumType) *ThriftType {
    x.TEnum = value
    return x
}

func (x *ThriftType) SetTStructNonCompat(value ThriftStructType) *ThriftType {
    x.TStruct = &value
    return x
}

func (x *ThriftType) SetTStruct(value *ThriftStructType) *ThriftType {
    x.TStruct = value
    return x
}

func (x *ThriftType) SetTUnionNonCompat(value ThriftUnionType) *ThriftType {
    x.TUnion = &value
    return x
}

func (x *ThriftType) SetTUnion(value *ThriftUnionType) *ThriftType {
    x.TUnion = value
    return x
}

func (x *ThriftType) SetTTypedefNonCompat(value ThriftTypedefType) *ThriftType {
    x.TTypedef = &value
    return x
}

func (x *ThriftType) SetTTypedef(value *ThriftTypedefType) *ThriftType {
    x.TTypedef = value
    return x
}

func (x *ThriftType) SetTStreamNonCompat(value ThriftStreamType) *ThriftType {
    x.TStream = &value
    return x
}

func (x *ThriftType) SetTStream(value *ThriftStreamType) *ThriftType {
    x.TStream = value
    return x
}

func (x *ThriftType) SetTSinkNonCompat(value ThriftSinkType) *ThriftType {
    x.TSink = &value
    return x
}

func (x *ThriftType) SetTSink(value *ThriftSinkType) *ThriftType {
    x.TSink = value
    return x
}

func (x *ThriftType) IsSetTPrimitive() bool {
    return x != nil && x.TPrimitive != nil
}

func (x *ThriftType) IsSetTList() bool {
    return x != nil && x.TList != nil
}

func (x *ThriftType) IsSetTSet() bool {
    return x != nil && x.TSet != nil
}

func (x *ThriftType) IsSetTMap() bool {
    return x != nil && x.TMap != nil
}

func (x *ThriftType) IsSetTEnum() bool {
    return x != nil && x.TEnum != nil
}

func (x *ThriftType) IsSetTStruct() bool {
    return x != nil && x.TStruct != nil
}

func (x *ThriftType) IsSetTUnion() bool {
    return x != nil && x.TUnion != nil
}

func (x *ThriftType) IsSetTTypedef() bool {
    return x != nil && x.TTypedef != nil
}

func (x *ThriftType) IsSetTStream() bool {
    return x != nil && x.TStream != nil
}

func (x *ThriftType) IsSetTSink() bool {
    return x != nil && x.TSink != nil
}

func (x *ThriftType) writeField1(p thrift.Format) error {  // TPrimitive
    if !x.IsSetTPrimitive() {
        return nil
    }

    if err := p.WriteFieldBegin("t_primitive", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetTPrimitiveNonCompat()
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftType) writeField2(p thrift.Format) error {  // TList
    if !x.IsSetTList() {
        return nil
    }

    if err := p.WriteFieldBegin("t_list", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTListNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftType) writeField3(p thrift.Format) error {  // TSet
    if !x.IsSetTSet() {
        return nil
    }

    if err := p.WriteFieldBegin("t_set", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTSetNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftType) writeField4(p thrift.Format) error {  // TMap
    if !x.IsSetTMap() {
        return nil
    }

    if err := p.WriteFieldBegin("t_map", thrift.STRUCT, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTMapNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftType) writeField5(p thrift.Format) error {  // TEnum
    if !x.IsSetTEnum() {
        return nil
    }

    if err := p.WriteFieldBegin("t_enum", thrift.STRUCT, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTEnumNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftType) writeField6(p thrift.Format) error {  // TStruct
    if !x.IsSetTStruct() {
        return nil
    }

    if err := p.WriteFieldBegin("t_struct", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTStructNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftType) writeField7(p thrift.Format) error {  // TUnion
    if !x.IsSetTUnion() {
        return nil
    }

    if err := p.WriteFieldBegin("t_union", thrift.STRUCT, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTUnionNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftType) writeField8(p thrift.Format) error {  // TTypedef
    if !x.IsSetTTypedef() {
        return nil
    }

    if err := p.WriteFieldBegin("t_typedef", thrift.STRUCT, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTTypedefNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftType) writeField9(p thrift.Format) error {  // TStream
    if !x.IsSetTStream() {
        return nil
    }

    if err := p.WriteFieldBegin("t_stream", thrift.STRUCT, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTStreamNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftType) writeField10(p thrift.Format) error {  // TSink
    if !x.IsSetTSink() {
        return nil
    }

    if err := p.WriteFieldBegin("t_sink", thrift.STRUCT, 10); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTSinkNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftType) readField1(p thrift.Format) error {  // TPrimitive
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := ThriftPrimitiveType(enumResult)

    x.SetTPrimitiveNonCompat(result)
    return nil
}

func (x *ThriftType) readField2(p thrift.Format) error {  // TList
    result := *NewThriftListType()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetTListNonCompat(result)
    return nil
}

func (x *ThriftType) readField3(p thrift.Format) error {  // TSet
    result := *NewThriftSetType()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetTSetNonCompat(result)
    return nil
}

func (x *ThriftType) readField4(p thrift.Format) error {  // TMap
    result := *NewThriftMapType()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetTMapNonCompat(result)
    return nil
}

func (x *ThriftType) readField5(p thrift.Format) error {  // TEnum
    result := *NewThriftEnumType()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetTEnumNonCompat(result)
    return nil
}

func (x *ThriftType) readField6(p thrift.Format) error {  // TStruct
    result := *NewThriftStructType()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetTStructNonCompat(result)
    return nil
}

func (x *ThriftType) readField7(p thrift.Format) error {  // TUnion
    result := *NewThriftUnionType()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetTUnionNonCompat(result)
    return nil
}

func (x *ThriftType) readField8(p thrift.Format) error {  // TTypedef
    result := *NewThriftTypedefType()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetTTypedefNonCompat(result)
    return nil
}

func (x *ThriftType) readField9(p thrift.Format) error {  // TStream
    result := *NewThriftStreamType()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetTStreamNonCompat(result)
    return nil
}

func (x *ThriftType) readField10(p thrift.Format) error {  // TSink
    result := *NewThriftSinkType()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetTSinkNonCompat(result)
    return nil
}

func (x *ThriftType) toString1() string {  // TPrimitive
    if x.IsSetTPrimitive() {
        return fmt.Sprintf("%v", *x.GetTPrimitiveNonCompat())
    }
    return fmt.Sprintf("%v", x.GetTPrimitiveNonCompat())
}

func (x *ThriftType) toString2() string {  // TList
    return fmt.Sprintf("%v", x.GetTListNonCompat())
}

func (x *ThriftType) toString3() string {  // TSet
    return fmt.Sprintf("%v", x.GetTSetNonCompat())
}

func (x *ThriftType) toString4() string {  // TMap
    return fmt.Sprintf("%v", x.GetTMapNonCompat())
}

func (x *ThriftType) toString5() string {  // TEnum
    return fmt.Sprintf("%v", x.GetTEnumNonCompat())
}

func (x *ThriftType) toString6() string {  // TStruct
    return fmt.Sprintf("%v", x.GetTStructNonCompat())
}

func (x *ThriftType) toString7() string {  // TUnion
    return fmt.Sprintf("%v", x.GetTUnionNonCompat())
}

func (x *ThriftType) toString8() string {  // TTypedef
    return fmt.Sprintf("%v", x.GetTTypedefNonCompat())
}

func (x *ThriftType) toString9() string {  // TStream
    return fmt.Sprintf("%v", x.GetTStreamNonCompat())
}

func (x *ThriftType) toString10() string {  // TSink
    return fmt.Sprintf("%v", x.GetTSinkNonCompat())
}


// Deprecated: Use NewThriftType().GetTList() instead.
func (x *ThriftType) DefaultGetTList() *ThriftListType {
    if !x.IsSetTList() {
        return NewThriftListType()
    }
    return x.TList
}

// Deprecated: Use NewThriftType().GetTSet() instead.
func (x *ThriftType) DefaultGetTSet() *ThriftSetType {
    if !x.IsSetTSet() {
        return NewThriftSetType()
    }
    return x.TSet
}

// Deprecated: Use NewThriftType().GetTMap() instead.
func (x *ThriftType) DefaultGetTMap() *ThriftMapType {
    if !x.IsSetTMap() {
        return NewThriftMapType()
    }
    return x.TMap
}

// Deprecated: Use NewThriftType().GetTEnum() instead.
func (x *ThriftType) DefaultGetTEnum() *ThriftEnumType {
    if !x.IsSetTEnum() {
        return NewThriftEnumType()
    }
    return x.TEnum
}

// Deprecated: Use NewThriftType().GetTStruct() instead.
func (x *ThriftType) DefaultGetTStruct() *ThriftStructType {
    if !x.IsSetTStruct() {
        return NewThriftStructType()
    }
    return x.TStruct
}

// Deprecated: Use NewThriftType().GetTUnion() instead.
func (x *ThriftType) DefaultGetTUnion() *ThriftUnionType {
    if !x.IsSetTUnion() {
        return NewThriftUnionType()
    }
    return x.TUnion
}

// Deprecated: Use NewThriftType().GetTTypedef() instead.
func (x *ThriftType) DefaultGetTTypedef() *ThriftTypedefType {
    if !x.IsSetTTypedef() {
        return NewThriftTypedefType()
    }
    return x.TTypedef
}

// Deprecated: Use NewThriftType().GetTStream() instead.
func (x *ThriftType) DefaultGetTStream() *ThriftStreamType {
    if !x.IsSetTStream() {
        return NewThriftStreamType()
    }
    return x.TStream
}

// Deprecated: Use NewThriftType().GetTSink() instead.
func (x *ThriftType) DefaultGetTSink() *ThriftSinkType {
    if !x.IsSetTSink() {
        return NewThriftSinkType()
    }
    return x.TSink
}

func (x *ThriftType) countSetFields() int {
    count := int(0)
    if (x.IsSetTPrimitive()) {
        count++
    }
    if (x.IsSetTList()) {
        count++
    }
    if (x.IsSetTSet()) {
        count++
    }
    if (x.IsSetTMap()) {
        count++
    }
    if (x.IsSetTEnum()) {
        count++
    }
    if (x.IsSetTStruct()) {
        count++
    }
    if (x.IsSetTUnion()) {
        count++
    }
    if (x.IsSetTTypedef()) {
        count++
    }
    if (x.IsSetTStream()) {
        count++
    }
    if (x.IsSetTSink()) {
        count++
    }
    return count
}

func (x *ThriftType) CountSetFieldsThriftType() int {
    return x.countSetFields()
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftType().Set<FieldNameFoo>().Set<FieldNameBar>()
type ThriftTypeBuilder struct {
    obj *ThriftType
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftType().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewThriftTypeBuilder() *ThriftTypeBuilder {
    return &ThriftTypeBuilder{
        obj: NewThriftType(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftTypeBuilder) TPrimitive(value *ThriftPrimitiveType) *ThriftTypeBuilder {
    x.obj.TPrimitive = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftTypeBuilder) TList(value *ThriftListType) *ThriftTypeBuilder {
    x.obj.TList = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftTypeBuilder) TSet(value *ThriftSetType) *ThriftTypeBuilder {
    x.obj.TSet = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftTypeBuilder) TMap(value *ThriftMapType) *ThriftTypeBuilder {
    x.obj.TMap = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftTypeBuilder) TEnum(value *ThriftEnumType) *ThriftTypeBuilder {
    x.obj.TEnum = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftTypeBuilder) TStruct(value *ThriftStructType) *ThriftTypeBuilder {
    x.obj.TStruct = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftTypeBuilder) TUnion(value *ThriftUnionType) *ThriftTypeBuilder {
    x.obj.TUnion = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftTypeBuilder) TTypedef(value *ThriftTypedefType) *ThriftTypeBuilder {
    x.obj.TTypedef = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftTypeBuilder) TStream(value *ThriftStreamType) *ThriftTypeBuilder {
    x.obj.TStream = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftTypeBuilder) TSink(value *ThriftSinkType) *ThriftTypeBuilder {
    x.obj.TSink = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftType().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftTypeBuilder) Emit() *ThriftType {
    var objCopy ThriftType = *x.obj
    return &objCopy
}

func (x *ThriftType) Write(p thrift.Format) error {
    if countSet := x.countSetFields(); countSet > 1 {
        return fmt.Errorf("%T write union: no more than one field must be set (%d set).", x, countSet)
    }
    if err := p.WriteStructBegin("ThriftType"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := x.writeField10(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ThriftType) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I32)):  // t_primitive
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.STRUCT)):  // t_list
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.STRUCT)):  // t_set
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 4 && wireType == thrift.Type(thrift.STRUCT)):  // t_map
            if err := x.readField4(p); err != nil {
                return err
            }
        case (id == 5 && wireType == thrift.Type(thrift.STRUCT)):  // t_enum
            if err := x.readField5(p); err != nil {
                return err
            }
        case (id == 6 && wireType == thrift.Type(thrift.STRUCT)):  // t_struct
            if err := x.readField6(p); err != nil {
                return err
            }
        case (id == 7 && wireType == thrift.Type(thrift.STRUCT)):  // t_union
            if err := x.readField7(p); err != nil {
                return err
            }
        case (id == 8 && wireType == thrift.Type(thrift.STRUCT)):  // t_typedef
            if err := x.readField8(p); err != nil {
                return err
            }
        case (id == 9 && wireType == thrift.Type(thrift.STRUCT)):  // t_stream
            if err := x.readField9(p); err != nil {
                return err
            }
        case (id == 10 && wireType == thrift.Type(thrift.STRUCT)):  // t_sink
            if err := x.readField10(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ThriftType) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ThriftType({")
    sb.WriteString(fmt.Sprintf("TPrimitive:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("TList:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("TSet:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("TMap:%s ", x.toString4()))
    sb.WriteString(fmt.Sprintf("TEnum:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("TStruct:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("TUnion:%s ", x.toString7()))
    sb.WriteString(fmt.Sprintf("TTypedef:%s ", x.toString8()))
    sb.WriteString(fmt.Sprintf("TStream:%s ", x.toString9()))
    sb.WriteString(fmt.Sprintf("TSink:%s", x.toString10()))
    sb.WriteString("})")

    return sb.String()
}

type ThriftEnum struct {
    Name string `thrift:"name,1" json:"name" db:"name"`
    Elements map[int32]string `thrift:"elements,2" json:"elements" db:"elements"`
    StructuredAnnotations []*ThriftConstStruct `thrift:"structured_annotations,3" json:"structured_annotations" db:"structured_annotations"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ThriftEnum{}

func NewThriftEnum() *ThriftEnum {
    return (&ThriftEnum{}).
        SetNameNonCompat("").
        SetElementsNonCompat(make(map[int32]string)).
        SetStructuredAnnotationsNonCompat(make([]*ThriftConstStruct, 0))
}

func (x *ThriftEnum) GetNameNonCompat() string {
    return x.Name
}

func (x *ThriftEnum) GetName() string {
    return x.Name
}

func (x *ThriftEnum) GetElementsNonCompat() map[int32]string {
    return x.Elements
}

func (x *ThriftEnum) GetElements() map[int32]string {
    if !x.IsSetElements() {
        return make(map[int32]string)
    }

    return x.Elements
}

func (x *ThriftEnum) GetStructuredAnnotationsNonCompat() []*ThriftConstStruct {
    return x.StructuredAnnotations
}

func (x *ThriftEnum) GetStructuredAnnotations() []*ThriftConstStruct {
    if !x.IsSetStructuredAnnotations() {
        return make([]*ThriftConstStruct, 0)
    }

    return x.StructuredAnnotations
}

func (x *ThriftEnum) SetNameNonCompat(value string) *ThriftEnum {
    x.Name = value
    return x
}

func (x *ThriftEnum) SetName(value string) *ThriftEnum {
    x.Name = value
    return x
}

func (x *ThriftEnum) SetElementsNonCompat(value map[int32]string) *ThriftEnum {
    x.Elements = value
    return x
}

func (x *ThriftEnum) SetElements(value map[int32]string) *ThriftEnum {
    x.Elements = value
    return x
}

func (x *ThriftEnum) SetStructuredAnnotationsNonCompat(value []*ThriftConstStruct) *ThriftEnum {
    x.StructuredAnnotations = value
    return x
}

func (x *ThriftEnum) SetStructuredAnnotations(value []*ThriftConstStruct) *ThriftEnum {
    x.StructuredAnnotations = value
    return x
}

func (x *ThriftEnum) IsSetElements() bool {
    return x != nil && x.Elements != nil
}

func (x *ThriftEnum) IsSetStructuredAnnotations() bool {
    return x != nil && x.StructuredAnnotations != nil
}

func (x *ThriftEnum) writeField1(p thrift.Format) error {  // Name
    if err := p.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetNameNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftEnum) writeField2(p thrift.Format) error {  // Elements
    if err := p.WriteFieldBegin("elements", thrift.MAP, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetElementsNonCompat()
    if err := p.WriteMapBegin(thrift.I32, thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteI32(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftEnum) writeField3(p thrift.Format) error {  // StructuredAnnotations
    if err := p.WriteFieldBegin("structured_annotations", thrift.LIST, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStructuredAnnotationsNonCompat()
    if err := p.WriteListBegin(thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftEnum) readField1(p thrift.Format) error {  // Name
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetNameNonCompat(result)
    return nil
}

func (x *ThriftEnum) readField2(p thrift.Format) error {  // Elements
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[int32]string, size)
for i := 0; i < size; i++ {
    var key int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        key = result
    }

    var value string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetElementsNonCompat(result)
    return nil
}

func (x *ThriftEnum) readField3(p thrift.Format) error {  // StructuredAnnotations
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]*ThriftConstStruct, 0, size)
for i := 0; i < size; i++ {
    var elem ThriftConstStruct
    {
        result := *NewThriftConstStruct()
err := result.Read(p)
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, &elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetStructuredAnnotationsNonCompat(result)
    return nil
}

func (x *ThriftEnum) toString1() string {  // Name
    return fmt.Sprintf("%v", x.GetNameNonCompat())
}

func (x *ThriftEnum) toString2() string {  // Elements
    return fmt.Sprintf("%v", x.GetElementsNonCompat())
}

func (x *ThriftEnum) toString3() string {  // StructuredAnnotations
    return fmt.Sprintf("%v", x.GetStructuredAnnotationsNonCompat())
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftEnum().Set<FieldNameFoo>().Set<FieldNameBar>()
type ThriftEnumBuilder struct {
    obj *ThriftEnum
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftEnum().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewThriftEnumBuilder() *ThriftEnumBuilder {
    return &ThriftEnumBuilder{
        obj: NewThriftEnum(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftEnum().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftEnumBuilder) Name(value string) *ThriftEnumBuilder {
    x.obj.Name = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftEnum().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftEnumBuilder) Elements(value map[int32]string) *ThriftEnumBuilder {
    x.obj.Elements = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftEnum().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftEnumBuilder) StructuredAnnotations(value []*ThriftConstStruct) *ThriftEnumBuilder {
    x.obj.StructuredAnnotations = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftEnum().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftEnumBuilder) Emit() *ThriftEnum {
    var objCopy ThriftEnum = *x.obj
    return &objCopy
}

func (x *ThriftEnum) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("ThriftEnum"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ThriftEnum) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // name
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.MAP)):  // elements
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.LIST)):  // structured_annotations
            if err := x.readField3(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ThriftEnum) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ThriftEnum({")
    sb.WriteString(fmt.Sprintf("Name:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Elements:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("StructuredAnnotations:%s", x.toString3()))
    sb.WriteString("})")

    return sb.String()
}

type ThriftField struct {
    Id int32 `thrift:"id,1" json:"id" db:"id"`
    Type *ThriftType `thrift:"type,2" json:"type" db:"type"`
    Name string `thrift:"name,3" json:"name" db:"name"`
    IsOptional bool `thrift:"is_optional,4" json:"is_optional" db:"is_optional"`
    StructuredAnnotations []*ThriftConstStruct `thrift:"structured_annotations,5" json:"structured_annotations" db:"structured_annotations"`
    UnstructuredAnnotations map[string]string `thrift:"unstructured_annotations,6,optional" json:"unstructured_annotations,omitempty" db:"unstructured_annotations"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ThriftField{}

func NewThriftField() *ThriftField {
    return (&ThriftField{}).
        SetIdNonCompat(0).
        SetTypeNonCompat(*NewThriftType()).
        SetNameNonCompat("").
        SetIsOptionalNonCompat(false).
        SetStructuredAnnotationsNonCompat(make([]*ThriftConstStruct, 0))
}

func (x *ThriftField) GetIdNonCompat() int32 {
    return x.Id
}

func (x *ThriftField) GetId() int32 {
    return x.Id
}

func (x *ThriftField) GetTypeNonCompat() *ThriftType {
    return x.Type
}

func (x *ThriftField) GetType() *ThriftType {
    if !x.IsSetType() {
        return nil
    }

    return x.Type
}

func (x *ThriftField) GetNameNonCompat() string {
    return x.Name
}

func (x *ThriftField) GetName() string {
    return x.Name
}

func (x *ThriftField) GetIsOptionalNonCompat() bool {
    return x.IsOptional
}

func (x *ThriftField) GetIsOptional() bool {
    return x.IsOptional
}

func (x *ThriftField) GetStructuredAnnotationsNonCompat() []*ThriftConstStruct {
    return x.StructuredAnnotations
}

func (x *ThriftField) GetStructuredAnnotations() []*ThriftConstStruct {
    if !x.IsSetStructuredAnnotations() {
        return make([]*ThriftConstStruct, 0)
    }

    return x.StructuredAnnotations
}

func (x *ThriftField) GetUnstructuredAnnotationsNonCompat() map[string]string {
    return x.UnstructuredAnnotations
}

func (x *ThriftField) GetUnstructuredAnnotations() map[string]string {
    if !x.IsSetUnstructuredAnnotations() {
        return make(map[string]string)
    }

    return x.UnstructuredAnnotations
}

func (x *ThriftField) SetIdNonCompat(value int32) *ThriftField {
    x.Id = value
    return x
}

func (x *ThriftField) SetId(value int32) *ThriftField {
    x.Id = value
    return x
}

func (x *ThriftField) SetTypeNonCompat(value ThriftType) *ThriftField {
    x.Type = &value
    return x
}

func (x *ThriftField) SetType(value *ThriftType) *ThriftField {
    x.Type = value
    return x
}

func (x *ThriftField) SetNameNonCompat(value string) *ThriftField {
    x.Name = value
    return x
}

func (x *ThriftField) SetName(value string) *ThriftField {
    x.Name = value
    return x
}

func (x *ThriftField) SetIsOptionalNonCompat(value bool) *ThriftField {
    x.IsOptional = value
    return x
}

func (x *ThriftField) SetIsOptional(value bool) *ThriftField {
    x.IsOptional = value
    return x
}

func (x *ThriftField) SetStructuredAnnotationsNonCompat(value []*ThriftConstStruct) *ThriftField {
    x.StructuredAnnotations = value
    return x
}

func (x *ThriftField) SetStructuredAnnotations(value []*ThriftConstStruct) *ThriftField {
    x.StructuredAnnotations = value
    return x
}

func (x *ThriftField) SetUnstructuredAnnotationsNonCompat(value map[string]string) *ThriftField {
    x.UnstructuredAnnotations = value
    return x
}

func (x *ThriftField) SetUnstructuredAnnotations(value map[string]string) *ThriftField {
    x.UnstructuredAnnotations = value
    return x
}

func (x *ThriftField) IsSetType() bool {
    return x != nil && x.Type != nil
}

func (x *ThriftField) IsSetStructuredAnnotations() bool {
    return x != nil && x.StructuredAnnotations != nil
}

func (x *ThriftField) IsSetUnstructuredAnnotations() bool {
    return x != nil && x.UnstructuredAnnotations != nil
}

func (x *ThriftField) writeField1(p thrift.Format) error {  // Id
    if err := p.WriteFieldBegin("id", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetIdNonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftField) writeField2(p thrift.Format) error {  // Type
    if !x.IsSetType() {
        return nil
    }

    if err := p.WriteFieldBegin("type", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetTypeNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftField) writeField3(p thrift.Format) error {  // Name
    if err := p.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetNameNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftField) writeField4(p thrift.Format) error {  // IsOptional
    if err := p.WriteFieldBegin("is_optional", thrift.BOOL, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetIsOptionalNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftField) writeField5(p thrift.Format) error {  // StructuredAnnotations
    if err := p.WriteFieldBegin("structured_annotations", thrift.LIST, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStructuredAnnotationsNonCompat()
    if err := p.WriteListBegin(thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftField) writeField6(p thrift.Format) error {  // UnstructuredAnnotations
    if !x.IsSetUnstructuredAnnotations() {
        return nil
    }

    if err := p.WriteFieldBegin("unstructured_annotations", thrift.MAP, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetUnstructuredAnnotationsNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftField) readField1(p thrift.Format) error {  // Id
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetIdNonCompat(result)
    return nil
}

func (x *ThriftField) readField2(p thrift.Format) error {  // Type
    result := *NewThriftType()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetTypeNonCompat(result)
    return nil
}

func (x *ThriftField) readField3(p thrift.Format) error {  // Name
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetNameNonCompat(result)
    return nil
}

func (x *ThriftField) readField4(p thrift.Format) error {  // IsOptional
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetIsOptionalNonCompat(result)
    return nil
}

func (x *ThriftField) readField5(p thrift.Format) error {  // StructuredAnnotations
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]*ThriftConstStruct, 0, size)
for i := 0; i < size; i++ {
    var elem ThriftConstStruct
    {
        result := *NewThriftConstStruct()
err := result.Read(p)
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, &elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetStructuredAnnotationsNonCompat(result)
    return nil
}

func (x *ThriftField) readField6(p thrift.Format) error {  // UnstructuredAnnotations
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]string, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetUnstructuredAnnotationsNonCompat(result)
    return nil
}

func (x *ThriftField) toString1() string {  // Id
    return fmt.Sprintf("%v", x.GetIdNonCompat())
}

func (x *ThriftField) toString2() string {  // Type
    return fmt.Sprintf("%v", x.GetTypeNonCompat())
}

func (x *ThriftField) toString3() string {  // Name
    return fmt.Sprintf("%v", x.GetNameNonCompat())
}

func (x *ThriftField) toString4() string {  // IsOptional
    return fmt.Sprintf("%v", x.GetIsOptionalNonCompat())
}

func (x *ThriftField) toString5() string {  // StructuredAnnotations
    return fmt.Sprintf("%v", x.GetStructuredAnnotationsNonCompat())
}

func (x *ThriftField) toString6() string {  // UnstructuredAnnotations
    return fmt.Sprintf("%v", x.GetUnstructuredAnnotationsNonCompat())
}

// Deprecated: Use NewThriftField().GetType() instead.
func (x *ThriftField) DefaultGetType() *ThriftType {
    if !x.IsSetType() {
        return NewThriftType()
    }
    return x.Type
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftField().Set<FieldNameFoo>().Set<FieldNameBar>()
type ThriftFieldBuilder struct {
    obj *ThriftField
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftField().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewThriftFieldBuilder() *ThriftFieldBuilder {
    return &ThriftFieldBuilder{
        obj: NewThriftField(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftField().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftFieldBuilder) Id(value int32) *ThriftFieldBuilder {
    x.obj.Id = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftField().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftFieldBuilder) Type(value *ThriftType) *ThriftFieldBuilder {
    x.obj.Type = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftField().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftFieldBuilder) Name(value string) *ThriftFieldBuilder {
    x.obj.Name = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftField().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftFieldBuilder) IsOptional(value bool) *ThriftFieldBuilder {
    x.obj.IsOptional = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftField().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftFieldBuilder) StructuredAnnotations(value []*ThriftConstStruct) *ThriftFieldBuilder {
    x.obj.StructuredAnnotations = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftField().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftFieldBuilder) UnstructuredAnnotations(value map[string]string) *ThriftFieldBuilder {
    x.obj.UnstructuredAnnotations = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftField().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftFieldBuilder) Emit() *ThriftField {
    var objCopy ThriftField = *x.obj
    return &objCopy
}

func (x *ThriftField) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("ThriftField"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ThriftField) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.I32)):  // id
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.STRUCT)):  // type
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.STRING)):  // name
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 4 && wireType == thrift.Type(thrift.BOOL)):  // is_optional
            if err := x.readField4(p); err != nil {
                return err
            }
        case (id == 5 && wireType == thrift.Type(thrift.LIST)):  // structured_annotations
            if err := x.readField5(p); err != nil {
                return err
            }
        case (id == 6 && wireType == thrift.Type(thrift.MAP)):  // unstructured_annotations
            if err := x.readField6(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ThriftField) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ThriftField({")
    sb.WriteString(fmt.Sprintf("Id:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Type:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Name:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("IsOptional:%s ", x.toString4()))
    sb.WriteString(fmt.Sprintf("StructuredAnnotations:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("UnstructuredAnnotations:%s", x.toString6()))
    sb.WriteString("})")

    return sb.String()
}

type ThriftStruct struct {
    Name string `thrift:"name,1" json:"name" db:"name"`
    Fields []*ThriftField `thrift:"fields,2" json:"fields" db:"fields"`
    IsUnion bool `thrift:"is_union,3" json:"is_union" db:"is_union"`
    StructuredAnnotations []*ThriftConstStruct `thrift:"structured_annotations,4" json:"structured_annotations" db:"structured_annotations"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ThriftStruct{}

func NewThriftStruct() *ThriftStruct {
    return (&ThriftStruct{}).
        SetNameNonCompat("").
        SetFieldsNonCompat(make([]*ThriftField, 0)).
        SetIsUnionNonCompat(false).
        SetStructuredAnnotationsNonCompat(make([]*ThriftConstStruct, 0))
}

func (x *ThriftStruct) GetNameNonCompat() string {
    return x.Name
}

func (x *ThriftStruct) GetName() string {
    return x.Name
}

func (x *ThriftStruct) GetFieldsNonCompat() []*ThriftField {
    return x.Fields
}

func (x *ThriftStruct) GetFields() []*ThriftField {
    if !x.IsSetFields() {
        return make([]*ThriftField, 0)
    }

    return x.Fields
}

func (x *ThriftStruct) GetIsUnionNonCompat() bool {
    return x.IsUnion
}

func (x *ThriftStruct) GetIsUnion() bool {
    return x.IsUnion
}

func (x *ThriftStruct) GetStructuredAnnotationsNonCompat() []*ThriftConstStruct {
    return x.StructuredAnnotations
}

func (x *ThriftStruct) GetStructuredAnnotations() []*ThriftConstStruct {
    if !x.IsSetStructuredAnnotations() {
        return make([]*ThriftConstStruct, 0)
    }

    return x.StructuredAnnotations
}

func (x *ThriftStruct) SetNameNonCompat(value string) *ThriftStruct {
    x.Name = value
    return x
}

func (x *ThriftStruct) SetName(value string) *ThriftStruct {
    x.Name = value
    return x
}

func (x *ThriftStruct) SetFieldsNonCompat(value []*ThriftField) *ThriftStruct {
    x.Fields = value
    return x
}

func (x *ThriftStruct) SetFields(value []*ThriftField) *ThriftStruct {
    x.Fields = value
    return x
}

func (x *ThriftStruct) SetIsUnionNonCompat(value bool) *ThriftStruct {
    x.IsUnion = value
    return x
}

func (x *ThriftStruct) SetIsUnion(value bool) *ThriftStruct {
    x.IsUnion = value
    return x
}

func (x *ThriftStruct) SetStructuredAnnotationsNonCompat(value []*ThriftConstStruct) *ThriftStruct {
    x.StructuredAnnotations = value
    return x
}

func (x *ThriftStruct) SetStructuredAnnotations(value []*ThriftConstStruct) *ThriftStruct {
    x.StructuredAnnotations = value
    return x
}

func (x *ThriftStruct) IsSetFields() bool {
    return x != nil && x.Fields != nil
}

func (x *ThriftStruct) IsSetStructuredAnnotations() bool {
    return x != nil && x.StructuredAnnotations != nil
}

func (x *ThriftStruct) writeField1(p thrift.Format) error {  // Name
    if err := p.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetNameNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftStruct) writeField2(p thrift.Format) error {  // Fields
    if err := p.WriteFieldBegin("fields", thrift.LIST, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetFieldsNonCompat()
    if err := p.WriteListBegin(thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftStruct) writeField3(p thrift.Format) error {  // IsUnion
    if err := p.WriteFieldBegin("is_union", thrift.BOOL, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetIsUnionNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftStruct) writeField4(p thrift.Format) error {  // StructuredAnnotations
    if err := p.WriteFieldBegin("structured_annotations", thrift.LIST, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStructuredAnnotationsNonCompat()
    if err := p.WriteListBegin(thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftStruct) readField1(p thrift.Format) error {  // Name
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetNameNonCompat(result)
    return nil
}

func (x *ThriftStruct) readField2(p thrift.Format) error {  // Fields
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]*ThriftField, 0, size)
for i := 0; i < size; i++ {
    var elem ThriftField
    {
        result := *NewThriftField()
err := result.Read(p)
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, &elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetFieldsNonCompat(result)
    return nil
}

func (x *ThriftStruct) readField3(p thrift.Format) error {  // IsUnion
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetIsUnionNonCompat(result)
    return nil
}

func (x *ThriftStruct) readField4(p thrift.Format) error {  // StructuredAnnotations
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]*ThriftConstStruct, 0, size)
for i := 0; i < size; i++ {
    var elem ThriftConstStruct
    {
        result := *NewThriftConstStruct()
err := result.Read(p)
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, &elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetStructuredAnnotationsNonCompat(result)
    return nil
}

func (x *ThriftStruct) toString1() string {  // Name
    return fmt.Sprintf("%v", x.GetNameNonCompat())
}

func (x *ThriftStruct) toString2() string {  // Fields
    return fmt.Sprintf("%v", x.GetFieldsNonCompat())
}

func (x *ThriftStruct) toString3() string {  // IsUnion
    return fmt.Sprintf("%v", x.GetIsUnionNonCompat())
}

func (x *ThriftStruct) toString4() string {  // StructuredAnnotations
    return fmt.Sprintf("%v", x.GetStructuredAnnotationsNonCompat())
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftStruct().Set<FieldNameFoo>().Set<FieldNameBar>()
type ThriftStructBuilder struct {
    obj *ThriftStruct
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftStruct().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewThriftStructBuilder() *ThriftStructBuilder {
    return &ThriftStructBuilder{
        obj: NewThriftStruct(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftStruct().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftStructBuilder) Name(value string) *ThriftStructBuilder {
    x.obj.Name = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftStruct().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftStructBuilder) Fields(value []*ThriftField) *ThriftStructBuilder {
    x.obj.Fields = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftStruct().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftStructBuilder) IsUnion(value bool) *ThriftStructBuilder {
    x.obj.IsUnion = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftStruct().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftStructBuilder) StructuredAnnotations(value []*ThriftConstStruct) *ThriftStructBuilder {
    x.obj.StructuredAnnotations = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftStruct().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftStructBuilder) Emit() *ThriftStruct {
    var objCopy ThriftStruct = *x.obj
    return &objCopy
}

func (x *ThriftStruct) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("ThriftStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ThriftStruct) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // name
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.LIST)):  // fields
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.BOOL)):  // is_union
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 4 && wireType == thrift.Type(thrift.LIST)):  // structured_annotations
            if err := x.readField4(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ThriftStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ThriftStruct({")
    sb.WriteString(fmt.Sprintf("Name:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Fields:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("IsUnion:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("StructuredAnnotations:%s", x.toString4()))
    sb.WriteString("})")

    return sb.String()
}

type ThriftException struct {
    Name string `thrift:"name,1" json:"name" db:"name"`
    Fields []*ThriftField `thrift:"fields,2" json:"fields" db:"fields"`
    StructuredAnnotations []*ThriftConstStruct `thrift:"structured_annotations,3" json:"structured_annotations" db:"structured_annotations"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ThriftException{}

func NewThriftException() *ThriftException {
    return (&ThriftException{}).
        SetNameNonCompat("").
        SetFieldsNonCompat(make([]*ThriftField, 0)).
        SetStructuredAnnotationsNonCompat(make([]*ThriftConstStruct, 0))
}

func (x *ThriftException) GetNameNonCompat() string {
    return x.Name
}

func (x *ThriftException) GetName() string {
    return x.Name
}

func (x *ThriftException) GetFieldsNonCompat() []*ThriftField {
    return x.Fields
}

func (x *ThriftException) GetFields() []*ThriftField {
    if !x.IsSetFields() {
        return make([]*ThriftField, 0)
    }

    return x.Fields
}

func (x *ThriftException) GetStructuredAnnotationsNonCompat() []*ThriftConstStruct {
    return x.StructuredAnnotations
}

func (x *ThriftException) GetStructuredAnnotations() []*ThriftConstStruct {
    if !x.IsSetStructuredAnnotations() {
        return make([]*ThriftConstStruct, 0)
    }

    return x.StructuredAnnotations
}

func (x *ThriftException) SetNameNonCompat(value string) *ThriftException {
    x.Name = value
    return x
}

func (x *ThriftException) SetName(value string) *ThriftException {
    x.Name = value
    return x
}

func (x *ThriftException) SetFieldsNonCompat(value []*ThriftField) *ThriftException {
    x.Fields = value
    return x
}

func (x *ThriftException) SetFields(value []*ThriftField) *ThriftException {
    x.Fields = value
    return x
}

func (x *ThriftException) SetStructuredAnnotationsNonCompat(value []*ThriftConstStruct) *ThriftException {
    x.StructuredAnnotations = value
    return x
}

func (x *ThriftException) SetStructuredAnnotations(value []*ThriftConstStruct) *ThriftException {
    x.StructuredAnnotations = value
    return x
}

func (x *ThriftException) IsSetFields() bool {
    return x != nil && x.Fields != nil
}

func (x *ThriftException) IsSetStructuredAnnotations() bool {
    return x != nil && x.StructuredAnnotations != nil
}

func (x *ThriftException) writeField1(p thrift.Format) error {  // Name
    if err := p.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetNameNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftException) writeField2(p thrift.Format) error {  // Fields
    if err := p.WriteFieldBegin("fields", thrift.LIST, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetFieldsNonCompat()
    if err := p.WriteListBegin(thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftException) writeField3(p thrift.Format) error {  // StructuredAnnotations
    if err := p.WriteFieldBegin("structured_annotations", thrift.LIST, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStructuredAnnotationsNonCompat()
    if err := p.WriteListBegin(thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftException) readField1(p thrift.Format) error {  // Name
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetNameNonCompat(result)
    return nil
}

func (x *ThriftException) readField2(p thrift.Format) error {  // Fields
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]*ThriftField, 0, size)
for i := 0; i < size; i++ {
    var elem ThriftField
    {
        result := *NewThriftField()
err := result.Read(p)
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, &elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetFieldsNonCompat(result)
    return nil
}

func (x *ThriftException) readField3(p thrift.Format) error {  // StructuredAnnotations
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]*ThriftConstStruct, 0, size)
for i := 0; i < size; i++ {
    var elem ThriftConstStruct
    {
        result := *NewThriftConstStruct()
err := result.Read(p)
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, &elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetStructuredAnnotationsNonCompat(result)
    return nil
}

func (x *ThriftException) toString1() string {  // Name
    return fmt.Sprintf("%v", x.GetNameNonCompat())
}

func (x *ThriftException) toString2() string {  // Fields
    return fmt.Sprintf("%v", x.GetFieldsNonCompat())
}

func (x *ThriftException) toString3() string {  // StructuredAnnotations
    return fmt.Sprintf("%v", x.GetStructuredAnnotationsNonCompat())
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftException().Set<FieldNameFoo>().Set<FieldNameBar>()
type ThriftExceptionBuilder struct {
    obj *ThriftException
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftException().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewThriftExceptionBuilder() *ThriftExceptionBuilder {
    return &ThriftExceptionBuilder{
        obj: NewThriftException(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftException().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftExceptionBuilder) Name(value string) *ThriftExceptionBuilder {
    x.obj.Name = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftException().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftExceptionBuilder) Fields(value []*ThriftField) *ThriftExceptionBuilder {
    x.obj.Fields = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftException().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftExceptionBuilder) StructuredAnnotations(value []*ThriftConstStruct) *ThriftExceptionBuilder {
    x.obj.StructuredAnnotations = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftException().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftExceptionBuilder) Emit() *ThriftException {
    var objCopy ThriftException = *x.obj
    return &objCopy
}

func (x *ThriftException) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("ThriftException"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ThriftException) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // name
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.LIST)):  // fields
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.LIST)):  // structured_annotations
            if err := x.readField3(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ThriftException) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ThriftException({")
    sb.WriteString(fmt.Sprintf("Name:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Fields:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("StructuredAnnotations:%s", x.toString3()))
    sb.WriteString("})")

    return sb.String()
}

type ThriftFunction struct {
    Name string `thrift:"name,1" json:"name" db:"name"`
    ReturnType *ThriftType `thrift:"return_type,2" json:"return_type" db:"return_type"`
    Arguments []*ThriftField `thrift:"arguments,3" json:"arguments" db:"arguments"`
    Exceptions []*ThriftField `thrift:"exceptions,4" json:"exceptions" db:"exceptions"`
    IsOneway bool `thrift:"is_oneway,5" json:"is_oneway" db:"is_oneway"`
    StructuredAnnotations []*ThriftConstStruct `thrift:"structured_annotations,6" json:"structured_annotations" db:"structured_annotations"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ThriftFunction{}

func NewThriftFunction() *ThriftFunction {
    return (&ThriftFunction{}).
        SetNameNonCompat("").
        SetReturnTypeNonCompat(*NewThriftType()).
        SetArgumentsNonCompat(make([]*ThriftField, 0)).
        SetExceptionsNonCompat(make([]*ThriftField, 0)).
        SetIsOnewayNonCompat(false).
        SetStructuredAnnotationsNonCompat(make([]*ThriftConstStruct, 0))
}

func (x *ThriftFunction) GetNameNonCompat() string {
    return x.Name
}

func (x *ThriftFunction) GetName() string {
    return x.Name
}

func (x *ThriftFunction) GetReturnTypeNonCompat() *ThriftType {
    return x.ReturnType
}

func (x *ThriftFunction) GetReturnType() *ThriftType {
    if !x.IsSetReturnType() {
        return nil
    }

    return x.ReturnType
}

func (x *ThriftFunction) GetArgumentsNonCompat() []*ThriftField {
    return x.Arguments
}

func (x *ThriftFunction) GetArguments() []*ThriftField {
    if !x.IsSetArguments() {
        return make([]*ThriftField, 0)
    }

    return x.Arguments
}

func (x *ThriftFunction) GetExceptionsNonCompat() []*ThriftField {
    return x.Exceptions
}

func (x *ThriftFunction) GetExceptions() []*ThriftField {
    if !x.IsSetExceptions() {
        return make([]*ThriftField, 0)
    }

    return x.Exceptions
}

func (x *ThriftFunction) GetIsOnewayNonCompat() bool {
    return x.IsOneway
}

func (x *ThriftFunction) GetIsOneway() bool {
    return x.IsOneway
}

func (x *ThriftFunction) GetStructuredAnnotationsNonCompat() []*ThriftConstStruct {
    return x.StructuredAnnotations
}

func (x *ThriftFunction) GetStructuredAnnotations() []*ThriftConstStruct {
    if !x.IsSetStructuredAnnotations() {
        return make([]*ThriftConstStruct, 0)
    }

    return x.StructuredAnnotations
}

func (x *ThriftFunction) SetNameNonCompat(value string) *ThriftFunction {
    x.Name = value
    return x
}

func (x *ThriftFunction) SetName(value string) *ThriftFunction {
    x.Name = value
    return x
}

func (x *ThriftFunction) SetReturnTypeNonCompat(value ThriftType) *ThriftFunction {
    x.ReturnType = &value
    return x
}

func (x *ThriftFunction) SetReturnType(value *ThriftType) *ThriftFunction {
    x.ReturnType = value
    return x
}

func (x *ThriftFunction) SetArgumentsNonCompat(value []*ThriftField) *ThriftFunction {
    x.Arguments = value
    return x
}

func (x *ThriftFunction) SetArguments(value []*ThriftField) *ThriftFunction {
    x.Arguments = value
    return x
}

func (x *ThriftFunction) SetExceptionsNonCompat(value []*ThriftField) *ThriftFunction {
    x.Exceptions = value
    return x
}

func (x *ThriftFunction) SetExceptions(value []*ThriftField) *ThriftFunction {
    x.Exceptions = value
    return x
}

func (x *ThriftFunction) SetIsOnewayNonCompat(value bool) *ThriftFunction {
    x.IsOneway = value
    return x
}

func (x *ThriftFunction) SetIsOneway(value bool) *ThriftFunction {
    x.IsOneway = value
    return x
}

func (x *ThriftFunction) SetStructuredAnnotationsNonCompat(value []*ThriftConstStruct) *ThriftFunction {
    x.StructuredAnnotations = value
    return x
}

func (x *ThriftFunction) SetStructuredAnnotations(value []*ThriftConstStruct) *ThriftFunction {
    x.StructuredAnnotations = value
    return x
}

func (x *ThriftFunction) IsSetReturnType() bool {
    return x != nil && x.ReturnType != nil
}

func (x *ThriftFunction) IsSetArguments() bool {
    return x != nil && x.Arguments != nil
}

func (x *ThriftFunction) IsSetExceptions() bool {
    return x != nil && x.Exceptions != nil
}

func (x *ThriftFunction) IsSetStructuredAnnotations() bool {
    return x != nil && x.StructuredAnnotations != nil
}

func (x *ThriftFunction) writeField1(p thrift.Format) error {  // Name
    if err := p.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetNameNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftFunction) writeField2(p thrift.Format) error {  // ReturnType
    if !x.IsSetReturnType() {
        return nil
    }

    if err := p.WriteFieldBegin("return_type", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetReturnTypeNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftFunction) writeField3(p thrift.Format) error {  // Arguments
    if err := p.WriteFieldBegin("arguments", thrift.LIST, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetArgumentsNonCompat()
    if err := p.WriteListBegin(thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftFunction) writeField4(p thrift.Format) error {  // Exceptions
    if err := p.WriteFieldBegin("exceptions", thrift.LIST, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetExceptionsNonCompat()
    if err := p.WriteListBegin(thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftFunction) writeField5(p thrift.Format) error {  // IsOneway
    if err := p.WriteFieldBegin("is_oneway", thrift.BOOL, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetIsOnewayNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftFunction) writeField6(p thrift.Format) error {  // StructuredAnnotations
    if err := p.WriteFieldBegin("structured_annotations", thrift.LIST, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStructuredAnnotationsNonCompat()
    if err := p.WriteListBegin(thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftFunction) readField1(p thrift.Format) error {  // Name
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetNameNonCompat(result)
    return nil
}

func (x *ThriftFunction) readField2(p thrift.Format) error {  // ReturnType
    result := *NewThriftType()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetReturnTypeNonCompat(result)
    return nil
}

func (x *ThriftFunction) readField3(p thrift.Format) error {  // Arguments
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]*ThriftField, 0, size)
for i := 0; i < size; i++ {
    var elem ThriftField
    {
        result := *NewThriftField()
err := result.Read(p)
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, &elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetArgumentsNonCompat(result)
    return nil
}

func (x *ThriftFunction) readField4(p thrift.Format) error {  // Exceptions
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]*ThriftField, 0, size)
for i := 0; i < size; i++ {
    var elem ThriftField
    {
        result := *NewThriftField()
err := result.Read(p)
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, &elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetExceptionsNonCompat(result)
    return nil
}

func (x *ThriftFunction) readField5(p thrift.Format) error {  // IsOneway
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetIsOnewayNonCompat(result)
    return nil
}

func (x *ThriftFunction) readField6(p thrift.Format) error {  // StructuredAnnotations
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]*ThriftConstStruct, 0, size)
for i := 0; i < size; i++ {
    var elem ThriftConstStruct
    {
        result := *NewThriftConstStruct()
err := result.Read(p)
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, &elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetStructuredAnnotationsNonCompat(result)
    return nil
}

func (x *ThriftFunction) toString1() string {  // Name
    return fmt.Sprintf("%v", x.GetNameNonCompat())
}

func (x *ThriftFunction) toString2() string {  // ReturnType
    return fmt.Sprintf("%v", x.GetReturnTypeNonCompat())
}

func (x *ThriftFunction) toString3() string {  // Arguments
    return fmt.Sprintf("%v", x.GetArgumentsNonCompat())
}

func (x *ThriftFunction) toString4() string {  // Exceptions
    return fmt.Sprintf("%v", x.GetExceptionsNonCompat())
}

func (x *ThriftFunction) toString5() string {  // IsOneway
    return fmt.Sprintf("%v", x.GetIsOnewayNonCompat())
}

func (x *ThriftFunction) toString6() string {  // StructuredAnnotations
    return fmt.Sprintf("%v", x.GetStructuredAnnotationsNonCompat())
}

// Deprecated: Use NewThriftFunction().GetReturnType() instead.
func (x *ThriftFunction) DefaultGetReturnType() *ThriftType {
    if !x.IsSetReturnType() {
        return NewThriftType()
    }
    return x.ReturnType
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftFunction().Set<FieldNameFoo>().Set<FieldNameBar>()
type ThriftFunctionBuilder struct {
    obj *ThriftFunction
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftFunction().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewThriftFunctionBuilder() *ThriftFunctionBuilder {
    return &ThriftFunctionBuilder{
        obj: NewThriftFunction(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftFunction().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftFunctionBuilder) Name(value string) *ThriftFunctionBuilder {
    x.obj.Name = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftFunction().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftFunctionBuilder) ReturnType(value *ThriftType) *ThriftFunctionBuilder {
    x.obj.ReturnType = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftFunction().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftFunctionBuilder) Arguments(value []*ThriftField) *ThriftFunctionBuilder {
    x.obj.Arguments = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftFunction().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftFunctionBuilder) Exceptions(value []*ThriftField) *ThriftFunctionBuilder {
    x.obj.Exceptions = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftFunction().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftFunctionBuilder) IsOneway(value bool) *ThriftFunctionBuilder {
    x.obj.IsOneway = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftFunction().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftFunctionBuilder) StructuredAnnotations(value []*ThriftConstStruct) *ThriftFunctionBuilder {
    x.obj.StructuredAnnotations = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftFunction().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftFunctionBuilder) Emit() *ThriftFunction {
    var objCopy ThriftFunction = *x.obj
    return &objCopy
}

func (x *ThriftFunction) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("ThriftFunction"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ThriftFunction) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // name
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.STRUCT)):  // return_type
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.LIST)):  // arguments
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 4 && wireType == thrift.Type(thrift.LIST)):  // exceptions
            if err := x.readField4(p); err != nil {
                return err
            }
        case (id == 5 && wireType == thrift.Type(thrift.BOOL)):  // is_oneway
            if err := x.readField5(p); err != nil {
                return err
            }
        case (id == 6 && wireType == thrift.Type(thrift.LIST)):  // structured_annotations
            if err := x.readField6(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ThriftFunction) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ThriftFunction({")
    sb.WriteString(fmt.Sprintf("Name:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("ReturnType:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Arguments:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("Exceptions:%s ", x.toString4()))
    sb.WriteString(fmt.Sprintf("IsOneway:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("StructuredAnnotations:%s", x.toString6()))
    sb.WriteString("})")

    return sb.String()
}

type ThriftService struct {
    Name string `thrift:"name,1" json:"name" db:"name"`
    Functions []*ThriftFunction `thrift:"functions,2" json:"functions" db:"functions"`
    Parent *string `thrift:"parent,3,optional" json:"parent,omitempty" db:"parent"`
    StructuredAnnotations []*ThriftConstStruct `thrift:"structured_annotations,4" json:"structured_annotations" db:"structured_annotations"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ThriftService{}

func NewThriftService() *ThriftService {
    return (&ThriftService{}).
        SetNameNonCompat("").
        SetFunctionsNonCompat(make([]*ThriftFunction, 0)).
        SetStructuredAnnotationsNonCompat(make([]*ThriftConstStruct, 0))
}

func (x *ThriftService) GetNameNonCompat() string {
    return x.Name
}

func (x *ThriftService) GetName() string {
    return x.Name
}

func (x *ThriftService) GetFunctionsNonCompat() []*ThriftFunction {
    return x.Functions
}

func (x *ThriftService) GetFunctions() []*ThriftFunction {
    if !x.IsSetFunctions() {
        return make([]*ThriftFunction, 0)
    }

    return x.Functions
}

func (x *ThriftService) GetParentNonCompat() *string {
    return x.Parent
}

func (x *ThriftService) GetParent() string {
    if !x.IsSetParent() {
        return ""
    }

    return *x.Parent
}

func (x *ThriftService) GetStructuredAnnotationsNonCompat() []*ThriftConstStruct {
    return x.StructuredAnnotations
}

func (x *ThriftService) GetStructuredAnnotations() []*ThriftConstStruct {
    if !x.IsSetStructuredAnnotations() {
        return make([]*ThriftConstStruct, 0)
    }

    return x.StructuredAnnotations
}

func (x *ThriftService) SetNameNonCompat(value string) *ThriftService {
    x.Name = value
    return x
}

func (x *ThriftService) SetName(value string) *ThriftService {
    x.Name = value
    return x
}

func (x *ThriftService) SetFunctionsNonCompat(value []*ThriftFunction) *ThriftService {
    x.Functions = value
    return x
}

func (x *ThriftService) SetFunctions(value []*ThriftFunction) *ThriftService {
    x.Functions = value
    return x
}

func (x *ThriftService) SetParentNonCompat(value string) *ThriftService {
    x.Parent = &value
    return x
}

func (x *ThriftService) SetParent(value *string) *ThriftService {
    x.Parent = value
    return x
}

func (x *ThriftService) SetStructuredAnnotationsNonCompat(value []*ThriftConstStruct) *ThriftService {
    x.StructuredAnnotations = value
    return x
}

func (x *ThriftService) SetStructuredAnnotations(value []*ThriftConstStruct) *ThriftService {
    x.StructuredAnnotations = value
    return x
}

func (x *ThriftService) IsSetFunctions() bool {
    return x != nil && x.Functions != nil
}

func (x *ThriftService) IsSetParent() bool {
    return x != nil && x.Parent != nil
}

func (x *ThriftService) IsSetStructuredAnnotations() bool {
    return x != nil && x.StructuredAnnotations != nil
}

func (x *ThriftService) writeField1(p thrift.Format) error {  // Name
    if err := p.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetNameNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftService) writeField2(p thrift.Format) error {  // Functions
    if err := p.WriteFieldBegin("functions", thrift.LIST, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetFunctionsNonCompat()
    if err := p.WriteListBegin(thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftService) writeField3(p thrift.Format) error {  // Parent
    if !x.IsSetParent() {
        return nil
    }

    if err := p.WriteFieldBegin("parent", thrift.STRING, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetParentNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftService) writeField4(p thrift.Format) error {  // StructuredAnnotations
    if err := p.WriteFieldBegin("structured_annotations", thrift.LIST, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStructuredAnnotationsNonCompat()
    if err := p.WriteListBegin(thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftService) readField1(p thrift.Format) error {  // Name
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetNameNonCompat(result)
    return nil
}

func (x *ThriftService) readField2(p thrift.Format) error {  // Functions
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]*ThriftFunction, 0, size)
for i := 0; i < size; i++ {
    var elem ThriftFunction
    {
        result := *NewThriftFunction()
err := result.Read(p)
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, &elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetFunctionsNonCompat(result)
    return nil
}

func (x *ThriftService) readField3(p thrift.Format) error {  // Parent
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetParentNonCompat(result)
    return nil
}

func (x *ThriftService) readField4(p thrift.Format) error {  // StructuredAnnotations
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]*ThriftConstStruct, 0, size)
for i := 0; i < size; i++ {
    var elem ThriftConstStruct
    {
        result := *NewThriftConstStruct()
err := result.Read(p)
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, &elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetStructuredAnnotationsNonCompat(result)
    return nil
}

func (x *ThriftService) toString1() string {  // Name
    return fmt.Sprintf("%v", x.GetNameNonCompat())
}

func (x *ThriftService) toString2() string {  // Functions
    return fmt.Sprintf("%v", x.GetFunctionsNonCompat())
}

func (x *ThriftService) toString3() string {  // Parent
    if x.IsSetParent() {
        return fmt.Sprintf("%v", *x.GetParentNonCompat())
    }
    return fmt.Sprintf("%v", x.GetParentNonCompat())
}

func (x *ThriftService) toString4() string {  // StructuredAnnotations
    return fmt.Sprintf("%v", x.GetStructuredAnnotationsNonCompat())
}



// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftService().Set<FieldNameFoo>().Set<FieldNameBar>()
type ThriftServiceBuilder struct {
    obj *ThriftService
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftService().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewThriftServiceBuilder() *ThriftServiceBuilder {
    return &ThriftServiceBuilder{
        obj: NewThriftService(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftService().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftServiceBuilder) Name(value string) *ThriftServiceBuilder {
    x.obj.Name = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftService().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftServiceBuilder) Functions(value []*ThriftFunction) *ThriftServiceBuilder {
    x.obj.Functions = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftService().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftServiceBuilder) Parent(value *string) *ThriftServiceBuilder {
    x.obj.Parent = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftService().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftServiceBuilder) StructuredAnnotations(value []*ThriftConstStruct) *ThriftServiceBuilder {
    x.obj.StructuredAnnotations = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftService().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftServiceBuilder) Emit() *ThriftService {
    var objCopy ThriftService = *x.obj
    return &objCopy
}

func (x *ThriftService) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("ThriftService"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ThriftService) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // name
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.LIST)):  // functions
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.STRING)):  // parent
            if err := x.readField3(p); err != nil {
                return err
            }
        case (id == 4 && wireType == thrift.Type(thrift.LIST)):  // structured_annotations
            if err := x.readField4(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ThriftService) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ThriftService({")
    sb.WriteString(fmt.Sprintf("Name:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Functions:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Parent:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("StructuredAnnotations:%s", x.toString4()))
    sb.WriteString("})")

    return sb.String()
}

type ThriftModuleContext struct {
    Name string `thrift:"name,1" json:"name" db:"name"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ThriftModuleContext{}

func NewThriftModuleContext() *ThriftModuleContext {
    return (&ThriftModuleContext{}).
        SetNameNonCompat("")
}

func (x *ThriftModuleContext) GetNameNonCompat() string {
    return x.Name
}

func (x *ThriftModuleContext) GetName() string {
    return x.Name
}

func (x *ThriftModuleContext) SetNameNonCompat(value string) *ThriftModuleContext {
    x.Name = value
    return x
}

func (x *ThriftModuleContext) SetName(value string) *ThriftModuleContext {
    x.Name = value
    return x
}

func (x *ThriftModuleContext) writeField1(p thrift.Format) error {  // Name
    if err := p.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetNameNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftModuleContext) readField1(p thrift.Format) error {  // Name
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetNameNonCompat(result)
    return nil
}

func (x *ThriftModuleContext) toString1() string {  // Name
    return fmt.Sprintf("%v", x.GetNameNonCompat())
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftModuleContext().Set<FieldNameFoo>().Set<FieldNameBar>()
type ThriftModuleContextBuilder struct {
    obj *ThriftModuleContext
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftModuleContext().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewThriftModuleContextBuilder() *ThriftModuleContextBuilder {
    return &ThriftModuleContextBuilder{
        obj: NewThriftModuleContext(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftModuleContext().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftModuleContextBuilder) Name(value string) *ThriftModuleContextBuilder {
    x.obj.Name = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftModuleContext().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftModuleContextBuilder) Emit() *ThriftModuleContext {
    var objCopy ThriftModuleContext = *x.obj
    return &objCopy
}

func (x *ThriftModuleContext) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("ThriftModuleContext"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ThriftModuleContext) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // name
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ThriftModuleContext) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ThriftModuleContext({")
    sb.WriteString(fmt.Sprintf("Name:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}

type ThriftServiceContext struct {
    ServiceInfo *ThriftService `thrift:"service_info,1" json:"service_info" db:"service_info"`
    Module *ThriftModuleContext `thrift:"module,2" json:"module" db:"module"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ThriftServiceContext{}

func NewThriftServiceContext() *ThriftServiceContext {
    return (&ThriftServiceContext{}).
        SetServiceInfoNonCompat(*NewThriftService()).
        SetModuleNonCompat(*NewThriftModuleContext())
}

func (x *ThriftServiceContext) GetServiceInfoNonCompat() *ThriftService {
    return x.ServiceInfo
}

func (x *ThriftServiceContext) GetServiceInfo() *ThriftService {
    if !x.IsSetServiceInfo() {
        return nil
    }

    return x.ServiceInfo
}

func (x *ThriftServiceContext) GetModuleNonCompat() *ThriftModuleContext {
    return x.Module
}

func (x *ThriftServiceContext) GetModule() *ThriftModuleContext {
    if !x.IsSetModule() {
        return nil
    }

    return x.Module
}

func (x *ThriftServiceContext) SetServiceInfoNonCompat(value ThriftService) *ThriftServiceContext {
    x.ServiceInfo = &value
    return x
}

func (x *ThriftServiceContext) SetServiceInfo(value *ThriftService) *ThriftServiceContext {
    x.ServiceInfo = value
    return x
}

func (x *ThriftServiceContext) SetModuleNonCompat(value ThriftModuleContext) *ThriftServiceContext {
    x.Module = &value
    return x
}

func (x *ThriftServiceContext) SetModule(value *ThriftModuleContext) *ThriftServiceContext {
    x.Module = value
    return x
}

func (x *ThriftServiceContext) IsSetServiceInfo() bool {
    return x != nil && x.ServiceInfo != nil
}

func (x *ThriftServiceContext) IsSetModule() bool {
    return x != nil && x.Module != nil
}

func (x *ThriftServiceContext) writeField1(p thrift.Format) error {  // ServiceInfo
    if !x.IsSetServiceInfo() {
        return nil
    }

    if err := p.WriteFieldBegin("service_info", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetServiceInfoNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftServiceContext) writeField2(p thrift.Format) error {  // Module
    if !x.IsSetModule() {
        return nil
    }

    if err := p.WriteFieldBegin("module", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetModuleNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftServiceContext) readField1(p thrift.Format) error {  // ServiceInfo
    result := *NewThriftService()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetServiceInfoNonCompat(result)
    return nil
}

func (x *ThriftServiceContext) readField2(p thrift.Format) error {  // Module
    result := *NewThriftModuleContext()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetModuleNonCompat(result)
    return nil
}

func (x *ThriftServiceContext) toString1() string {  // ServiceInfo
    return fmt.Sprintf("%v", x.GetServiceInfoNonCompat())
}

func (x *ThriftServiceContext) toString2() string {  // Module
    return fmt.Sprintf("%v", x.GetModuleNonCompat())
}

// Deprecated: Use NewThriftServiceContext().GetServiceInfo() instead.
func (x *ThriftServiceContext) DefaultGetServiceInfo() *ThriftService {
    if !x.IsSetServiceInfo() {
        return NewThriftService()
    }
    return x.ServiceInfo
}

// Deprecated: Use NewThriftServiceContext().GetModule() instead.
func (x *ThriftServiceContext) DefaultGetModule() *ThriftModuleContext {
    if !x.IsSetModule() {
        return NewThriftModuleContext()
    }
    return x.Module
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftServiceContext().Set<FieldNameFoo>().Set<FieldNameBar>()
type ThriftServiceContextBuilder struct {
    obj *ThriftServiceContext
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftServiceContext().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewThriftServiceContextBuilder() *ThriftServiceContextBuilder {
    return &ThriftServiceContextBuilder{
        obj: NewThriftServiceContext(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftServiceContext().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftServiceContextBuilder) ServiceInfo(value *ThriftService) *ThriftServiceContextBuilder {
    x.obj.ServiceInfo = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftServiceContext().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftServiceContextBuilder) Module(value *ThriftModuleContext) *ThriftServiceContextBuilder {
    x.obj.Module = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftServiceContext().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftServiceContextBuilder) Emit() *ThriftServiceContext {
    var objCopy ThriftServiceContext = *x.obj
    return &objCopy
}

func (x *ThriftServiceContext) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("ThriftServiceContext"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ThriftServiceContext) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // service_info
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.STRUCT)):  // module
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ThriftServiceContext) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ThriftServiceContext({")
    sb.WriteString(fmt.Sprintf("ServiceInfo:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Module:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type ThriftServiceContextRef struct {
    ServiceName string `thrift:"service_name,1" json:"service_name" db:"service_name"`
    Module *ThriftModuleContext `thrift:"module,2" json:"module" db:"module"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ThriftServiceContextRef{}

func NewThriftServiceContextRef() *ThriftServiceContextRef {
    return (&ThriftServiceContextRef{}).
        SetServiceNameNonCompat("").
        SetModuleNonCompat(*NewThriftModuleContext())
}

func (x *ThriftServiceContextRef) GetServiceNameNonCompat() string {
    return x.ServiceName
}

func (x *ThriftServiceContextRef) GetServiceName() string {
    return x.ServiceName
}

func (x *ThriftServiceContextRef) GetModuleNonCompat() *ThriftModuleContext {
    return x.Module
}

func (x *ThriftServiceContextRef) GetModule() *ThriftModuleContext {
    if !x.IsSetModule() {
        return nil
    }

    return x.Module
}

func (x *ThriftServiceContextRef) SetServiceNameNonCompat(value string) *ThriftServiceContextRef {
    x.ServiceName = value
    return x
}

func (x *ThriftServiceContextRef) SetServiceName(value string) *ThriftServiceContextRef {
    x.ServiceName = value
    return x
}

func (x *ThriftServiceContextRef) SetModuleNonCompat(value ThriftModuleContext) *ThriftServiceContextRef {
    x.Module = &value
    return x
}

func (x *ThriftServiceContextRef) SetModule(value *ThriftModuleContext) *ThriftServiceContextRef {
    x.Module = value
    return x
}

func (x *ThriftServiceContextRef) IsSetModule() bool {
    return x != nil && x.Module != nil
}

func (x *ThriftServiceContextRef) writeField1(p thrift.Format) error {  // ServiceName
    if err := p.WriteFieldBegin("service_name", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetServiceNameNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftServiceContextRef) writeField2(p thrift.Format) error {  // Module
    if !x.IsSetModule() {
        return nil
    }

    if err := p.WriteFieldBegin("module", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetModuleNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftServiceContextRef) readField1(p thrift.Format) error {  // ServiceName
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetServiceNameNonCompat(result)
    return nil
}

func (x *ThriftServiceContextRef) readField2(p thrift.Format) error {  // Module
    result := *NewThriftModuleContext()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetModuleNonCompat(result)
    return nil
}

func (x *ThriftServiceContextRef) toString1() string {  // ServiceName
    return fmt.Sprintf("%v", x.GetServiceNameNonCompat())
}

func (x *ThriftServiceContextRef) toString2() string {  // Module
    return fmt.Sprintf("%v", x.GetModuleNonCompat())
}

// Deprecated: Use NewThriftServiceContextRef().GetModule() instead.
func (x *ThriftServiceContextRef) DefaultGetModule() *ThriftModuleContext {
    if !x.IsSetModule() {
        return NewThriftModuleContext()
    }
    return x.Module
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftServiceContextRef().Set<FieldNameFoo>().Set<FieldNameBar>()
type ThriftServiceContextRefBuilder struct {
    obj *ThriftServiceContextRef
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftServiceContextRef().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewThriftServiceContextRefBuilder() *ThriftServiceContextRefBuilder {
    return &ThriftServiceContextRefBuilder{
        obj: NewThriftServiceContextRef(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftServiceContextRef().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftServiceContextRefBuilder) ServiceName(value string) *ThriftServiceContextRefBuilder {
    x.obj.ServiceName = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftServiceContextRef().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftServiceContextRefBuilder) Module(value *ThriftModuleContext) *ThriftServiceContextRefBuilder {
    x.obj.Module = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftServiceContextRef().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftServiceContextRefBuilder) Emit() *ThriftServiceContextRef {
    var objCopy ThriftServiceContextRef = *x.obj
    return &objCopy
}

func (x *ThriftServiceContextRef) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("ThriftServiceContextRef"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ThriftServiceContextRef) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRING)):  // service_name
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.STRUCT)):  // module
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ThriftServiceContextRef) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ThriftServiceContextRef({")
    sb.WriteString(fmt.Sprintf("ServiceName:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Module:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type ThriftServiceMetadataResponse struct {
    Context *ThriftServiceContext `thrift:"context,1" json:"context" db:"context"`
    Metadata *ThriftMetadata `thrift:"metadata,2" json:"metadata" db:"metadata"`
    Services []*ThriftServiceContextRef `thrift:"services,3" json:"services" db:"services"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ThriftServiceMetadataResponse{}

func NewThriftServiceMetadataResponse() *ThriftServiceMetadataResponse {
    return (&ThriftServiceMetadataResponse{}).
        SetContextNonCompat(*NewThriftServiceContext()).
        SetMetadataNonCompat(*NewThriftMetadata()).
        SetServicesNonCompat(make([]*ThriftServiceContextRef, 0))
}

func (x *ThriftServiceMetadataResponse) GetContextNonCompat() *ThriftServiceContext {
    return x.Context
}

func (x *ThriftServiceMetadataResponse) GetContext() *ThriftServiceContext {
    if !x.IsSetContext() {
        return nil
    }

    return x.Context
}

func (x *ThriftServiceMetadataResponse) GetMetadataNonCompat() *ThriftMetadata {
    return x.Metadata
}

func (x *ThriftServiceMetadataResponse) GetMetadata() *ThriftMetadata {
    if !x.IsSetMetadata() {
        return nil
    }

    return x.Metadata
}

func (x *ThriftServiceMetadataResponse) GetServicesNonCompat() []*ThriftServiceContextRef {
    return x.Services
}

func (x *ThriftServiceMetadataResponse) GetServices() []*ThriftServiceContextRef {
    if !x.IsSetServices() {
        return make([]*ThriftServiceContextRef, 0)
    }

    return x.Services
}

func (x *ThriftServiceMetadataResponse) SetContextNonCompat(value ThriftServiceContext) *ThriftServiceMetadataResponse {
    x.Context = &value
    return x
}

func (x *ThriftServiceMetadataResponse) SetContext(value *ThriftServiceContext) *ThriftServiceMetadataResponse {
    x.Context = value
    return x
}

func (x *ThriftServiceMetadataResponse) SetMetadataNonCompat(value ThriftMetadata) *ThriftServiceMetadataResponse {
    x.Metadata = &value
    return x
}

func (x *ThriftServiceMetadataResponse) SetMetadata(value *ThriftMetadata) *ThriftServiceMetadataResponse {
    x.Metadata = value
    return x
}

func (x *ThriftServiceMetadataResponse) SetServicesNonCompat(value []*ThriftServiceContextRef) *ThriftServiceMetadataResponse {
    x.Services = value
    return x
}

func (x *ThriftServiceMetadataResponse) SetServices(value []*ThriftServiceContextRef) *ThriftServiceMetadataResponse {
    x.Services = value
    return x
}

func (x *ThriftServiceMetadataResponse) IsSetContext() bool {
    return x != nil && x.Context != nil
}

func (x *ThriftServiceMetadataResponse) IsSetMetadata() bool {
    return x != nil && x.Metadata != nil
}

func (x *ThriftServiceMetadataResponse) IsSetServices() bool {
    return x != nil && x.Services != nil
}

func (x *ThriftServiceMetadataResponse) writeField1(p thrift.Format) error {  // Context
    if !x.IsSetContext() {
        return nil
    }

    if err := p.WriteFieldBegin("context", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetContextNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftServiceMetadataResponse) writeField2(p thrift.Format) error {  // Metadata
    if !x.IsSetMetadata() {
        return nil
    }

    if err := p.WriteFieldBegin("metadata", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetMetadataNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftServiceMetadataResponse) writeField3(p thrift.Format) error {  // Services
    if err := p.WriteFieldBegin("services", thrift.LIST, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetServicesNonCompat()
    if err := p.WriteListBegin(thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftServiceMetadataResponse) readField1(p thrift.Format) error {  // Context
    result := *NewThriftServiceContext()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetContextNonCompat(result)
    return nil
}

func (x *ThriftServiceMetadataResponse) readField2(p thrift.Format) error {  // Metadata
    result := *NewThriftMetadata()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetMetadataNonCompat(result)
    return nil
}

func (x *ThriftServiceMetadataResponse) readField3(p thrift.Format) error {  // Services
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]*ThriftServiceContextRef, 0, size)
for i := 0; i < size; i++ {
    var elem ThriftServiceContextRef
    {
        result := *NewThriftServiceContextRef()
err := result.Read(p)
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, &elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetServicesNonCompat(result)
    return nil
}

func (x *ThriftServiceMetadataResponse) toString1() string {  // Context
    return fmt.Sprintf("%v", x.GetContextNonCompat())
}

func (x *ThriftServiceMetadataResponse) toString2() string {  // Metadata
    return fmt.Sprintf("%v", x.GetMetadataNonCompat())
}

func (x *ThriftServiceMetadataResponse) toString3() string {  // Services
    return fmt.Sprintf("%v", x.GetServicesNonCompat())
}

// Deprecated: Use NewThriftServiceMetadataResponse().GetContext() instead.
func (x *ThriftServiceMetadataResponse) DefaultGetContext() *ThriftServiceContext {
    if !x.IsSetContext() {
        return NewThriftServiceContext()
    }
    return x.Context
}

// Deprecated: Use NewThriftServiceMetadataResponse().GetMetadata() instead.
func (x *ThriftServiceMetadataResponse) DefaultGetMetadata() *ThriftMetadata {
    if !x.IsSetMetadata() {
        return NewThriftMetadata()
    }
    return x.Metadata
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftServiceMetadataResponse().Set<FieldNameFoo>().Set<FieldNameBar>()
type ThriftServiceMetadataResponseBuilder struct {
    obj *ThriftServiceMetadataResponse
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftServiceMetadataResponse().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewThriftServiceMetadataResponseBuilder() *ThriftServiceMetadataResponseBuilder {
    return &ThriftServiceMetadataResponseBuilder{
        obj: NewThriftServiceMetadataResponse(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftServiceMetadataResponse().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftServiceMetadataResponseBuilder) Context(value *ThriftServiceContext) *ThriftServiceMetadataResponseBuilder {
    x.obj.Context = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftServiceMetadataResponse().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftServiceMetadataResponseBuilder) Metadata(value *ThriftMetadata) *ThriftServiceMetadataResponseBuilder {
    x.obj.Metadata = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftServiceMetadataResponse().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftServiceMetadataResponseBuilder) Services(value []*ThriftServiceContextRef) *ThriftServiceMetadataResponseBuilder {
    x.obj.Services = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftServiceMetadataResponse().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftServiceMetadataResponseBuilder) Emit() *ThriftServiceMetadataResponse {
    var objCopy ThriftServiceMetadataResponse = *x.obj
    return &objCopy
}

func (x *ThriftServiceMetadataResponse) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("ThriftServiceMetadataResponse"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ThriftServiceMetadataResponse) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 1 && wireType == thrift.Type(thrift.STRUCT)):  // context
            if err := x.readField1(p); err != nil {
                return err
            }
        case (id == 2 && wireType == thrift.Type(thrift.STRUCT)):  // metadata
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 3 && wireType == thrift.Type(thrift.LIST)):  // services
            if err := x.readField3(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ThriftServiceMetadataResponse) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ThriftServiceMetadataResponse({")
    sb.WriteString(fmt.Sprintf("Context:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Metadata:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Services:%s", x.toString3()))
    sb.WriteString("})")

    return sb.String()
}

type ThriftMetadata struct {
    Enums map[string]*ThriftEnum `thrift:"enums,2" json:"enums" db:"enums"`
    Structs map[string]*ThriftStruct `thrift:"structs,4" json:"structs" db:"structs"`
    Exceptions map[string]*ThriftException `thrift:"exceptions,5" json:"exceptions" db:"exceptions"`
    Services map[string]*ThriftService `thrift:"services,6" json:"services" db:"services"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ThriftMetadata{}

func NewThriftMetadata() *ThriftMetadata {
    return (&ThriftMetadata{}).
        SetEnumsNonCompat(make(map[string]*ThriftEnum)).
        SetStructsNonCompat(make(map[string]*ThriftStruct)).
        SetExceptionsNonCompat(make(map[string]*ThriftException)).
        SetServicesNonCompat(make(map[string]*ThriftService))
}

func (x *ThriftMetadata) GetEnumsNonCompat() map[string]*ThriftEnum {
    return x.Enums
}

func (x *ThriftMetadata) GetEnums() map[string]*ThriftEnum {
    if !x.IsSetEnums() {
        return make(map[string]*ThriftEnum)
    }

    return x.Enums
}

func (x *ThriftMetadata) GetStructsNonCompat() map[string]*ThriftStruct {
    return x.Structs
}

func (x *ThriftMetadata) GetStructs() map[string]*ThriftStruct {
    if !x.IsSetStructs() {
        return make(map[string]*ThriftStruct)
    }

    return x.Structs
}

func (x *ThriftMetadata) GetExceptionsNonCompat() map[string]*ThriftException {
    return x.Exceptions
}

func (x *ThriftMetadata) GetExceptions() map[string]*ThriftException {
    if !x.IsSetExceptions() {
        return make(map[string]*ThriftException)
    }

    return x.Exceptions
}

func (x *ThriftMetadata) GetServicesNonCompat() map[string]*ThriftService {
    return x.Services
}

func (x *ThriftMetadata) GetServices() map[string]*ThriftService {
    if !x.IsSetServices() {
        return make(map[string]*ThriftService)
    }

    return x.Services
}

func (x *ThriftMetadata) SetEnumsNonCompat(value map[string]*ThriftEnum) *ThriftMetadata {
    x.Enums = value
    return x
}

func (x *ThriftMetadata) SetEnums(value map[string]*ThriftEnum) *ThriftMetadata {
    x.Enums = value
    return x
}

func (x *ThriftMetadata) SetStructsNonCompat(value map[string]*ThriftStruct) *ThriftMetadata {
    x.Structs = value
    return x
}

func (x *ThriftMetadata) SetStructs(value map[string]*ThriftStruct) *ThriftMetadata {
    x.Structs = value
    return x
}

func (x *ThriftMetadata) SetExceptionsNonCompat(value map[string]*ThriftException) *ThriftMetadata {
    x.Exceptions = value
    return x
}

func (x *ThriftMetadata) SetExceptions(value map[string]*ThriftException) *ThriftMetadata {
    x.Exceptions = value
    return x
}

func (x *ThriftMetadata) SetServicesNonCompat(value map[string]*ThriftService) *ThriftMetadata {
    x.Services = value
    return x
}

func (x *ThriftMetadata) SetServices(value map[string]*ThriftService) *ThriftMetadata {
    x.Services = value
    return x
}

func (x *ThriftMetadata) IsSetEnums() bool {
    return x != nil && x.Enums != nil
}

func (x *ThriftMetadata) IsSetStructs() bool {
    return x != nil && x.Structs != nil
}

func (x *ThriftMetadata) IsSetExceptions() bool {
    return x != nil && x.Exceptions != nil
}

func (x *ThriftMetadata) IsSetServices() bool {
    return x != nil && x.Services != nil
}

func (x *ThriftMetadata) writeField2(p thrift.Format) error {  // Enums
    if err := p.WriteFieldBegin("enums", thrift.MAP, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetEnumsNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftMetadata) writeField4(p thrift.Format) error {  // Structs
    if err := p.WriteFieldBegin("structs", thrift.MAP, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStructsNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftMetadata) writeField5(p thrift.Format) error {  // Exceptions
    if err := p.WriteFieldBegin("exceptions", thrift.MAP, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetExceptionsNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftMetadata) writeField6(p thrift.Format) error {  // Services
    if err := p.WriteFieldBegin("services", thrift.MAP, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetServicesNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ThriftMetadata) readField2(p thrift.Format) error {  // Enums
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*ThriftEnum, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *ThriftEnum
    {
        result := *NewThriftEnum()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetEnumsNonCompat(result)
    return nil
}

func (x *ThriftMetadata) readField4(p thrift.Format) error {  // Structs
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*ThriftStruct, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *ThriftStruct
    {
        result := *NewThriftStruct()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetStructsNonCompat(result)
    return nil
}

func (x *ThriftMetadata) readField5(p thrift.Format) error {  // Exceptions
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*ThriftException, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *ThriftException
    {
        result := *NewThriftException()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetExceptionsNonCompat(result)
    return nil
}

func (x *ThriftMetadata) readField6(p thrift.Format) error {  // Services
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*ThriftService, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *ThriftService
    {
        result := *NewThriftService()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetServicesNonCompat(result)
    return nil
}

func (x *ThriftMetadata) toString2() string {  // Enums
    return fmt.Sprintf("%v", x.GetEnumsNonCompat())
}

func (x *ThriftMetadata) toString4() string {  // Structs
    return fmt.Sprintf("%v", x.GetStructsNonCompat())
}

func (x *ThriftMetadata) toString5() string {  // Exceptions
    return fmt.Sprintf("%v", x.GetExceptionsNonCompat())
}

func (x *ThriftMetadata) toString6() string {  // Services
    return fmt.Sprintf("%v", x.GetServicesNonCompat())
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftMetadata().Set<FieldNameFoo>().Set<FieldNameBar>()
type ThriftMetadataBuilder struct {
    obj *ThriftMetadata
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftMetadata().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewThriftMetadataBuilder() *ThriftMetadataBuilder {
    return &ThriftMetadataBuilder{
        obj: NewThriftMetadata(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftMetadata().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftMetadataBuilder) Enums(value map[string]*ThriftEnum) *ThriftMetadataBuilder {
    x.obj.Enums = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftMetadata().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftMetadataBuilder) Structs(value map[string]*ThriftStruct) *ThriftMetadataBuilder {
    x.obj.Structs = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftMetadata().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftMetadataBuilder) Exceptions(value map[string]*ThriftException) *ThriftMetadataBuilder {
    x.obj.Exceptions = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftMetadata().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftMetadataBuilder) Services(value map[string]*ThriftService) *ThriftMetadataBuilder {
    x.obj.Services = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewThriftMetadata().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ThriftMetadataBuilder) Emit() *ThriftMetadata {
    var objCopy ThriftMetadata = *x.obj
    return &objCopy
}

func (x *ThriftMetadata) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("ThriftMetadata"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ThriftMetadata) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 2 && wireType == thrift.Type(thrift.MAP)):  // enums
            if err := x.readField2(p); err != nil {
                return err
            }
        case (id == 4 && wireType == thrift.Type(thrift.MAP)):  // structs
            if err := x.readField4(p); err != nil {
                return err
            }
        case (id == 5 && wireType == thrift.Type(thrift.MAP)):  // exceptions
            if err := x.readField5(p); err != nil {
                return err
            }
        case (id == 6 && wireType == thrift.Type(thrift.MAP)):  // services
            if err := x.readField6(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ThriftMetadata) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ThriftMetadata({")
    sb.WriteString(fmt.Sprintf("Enums:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Structs:%s ", x.toString4()))
    sb.WriteString(fmt.Sprintf("Exceptions:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("Services:%s", x.toString6()))
    sb.WriteString("})")

    return sb.String()
}

// RegisterTypes registers types found in this file that have a thrift_uri with the passed in registry.
func RegisterTypes(registry interface {
  RegisterType(name string, initializer func() any)
}) {

}
