// @generated by Thrift for [[[ program path ]]]
// This file is probably not the place you want to edit!

package metadata // [[[ program thrift source path ]]]


import (
    "context"
    "fmt"
    "strings"
    "sync"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction)
var _ = context.Background
var _ = fmt.Printf
var _ = strings.Split
var _ = sync.Mutex{}
var _ = thrift.ZERO



type ThriftMetadataService interface {
    GetThriftServiceMetadata(ctx context.Context) (*ThriftServiceMetadataResponse, error)
}

type ThriftMetadataServiceChannelClientInterface interface {
    thrift.ClientInterface
    ThriftMetadataService
}

type ThriftMetadataServiceClientInterface interface {
    thrift.ClientInterface
    GetThriftServiceMetadata() (*ThriftServiceMetadataResponse, error)
}

type ThriftMetadataServiceContextClientInterface interface {
    ThriftMetadataServiceClientInterface
    GetThriftServiceMetadataContext(ctx context.Context) (*ThriftServiceMetadataResponse, error)
}

type ThriftMetadataServiceChannelClient struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ ThriftMetadataServiceChannelClientInterface = &ThriftMetadataServiceChannelClient{}

func NewThriftMetadataServiceChannelClient(channel thrift.RequestChannel) *ThriftMetadataServiceChannelClient {
    return &ThriftMetadataServiceChannelClient{
        ch: channel,
    }
}

func (c *ThriftMetadataServiceChannelClient) Close() error {
    return c.ch.Close()
}

type ThriftMetadataServiceClient struct {
    chClient *ThriftMetadataServiceChannelClient
    Mu       sync.Mutex
}
// Compile time interface enforcer
var _ ThriftMetadataServiceClientInterface = &ThriftMetadataServiceClient{}
var _ ThriftMetadataServiceContextClientInterface = &ThriftMetadataServiceClient{}

func NewThriftMetadataServiceClient(prot thrift.Protocol) *ThriftMetadataServiceClient {
    return &ThriftMetadataServiceClient{
        chClient: NewThriftMetadataServiceChannelClient(
            thrift.NewSerialChannel(prot),
        ),
    }
}

func (c *ThriftMetadataServiceClient) Close() error {
    return c.chClient.Close()
}

func (c *ThriftMetadataServiceChannelClient) GetThriftServiceMetadata(ctx context.Context) (*ThriftServiceMetadataResponse, error) {
    in := &reqThriftMetadataServiceGetThriftServiceMetadata{
    }
    out := newRespThriftMetadataServiceGetThriftServiceMetadata()
    err := c.ch.Call(ctx, "getThriftServiceMetadata", in, out)
    if err != nil {
        return nil, err
    }
    return out.GetSuccess(), nil
}

func (c *ThriftMetadataServiceClient) GetThriftServiceMetadata() (*ThriftServiceMetadataResponse, error) {
    return c.chClient.GetThriftServiceMetadata(context.Background())
}

func (c *ThriftMetadataServiceClient) GetThriftServiceMetadataContext(ctx context.Context) (*ThriftServiceMetadataResponse, error) {
    return c.chClient.GetThriftServiceMetadata(ctx)
}

type reqThriftMetadataServiceGetThriftServiceMetadata struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &reqThriftMetadataServiceGetThriftServiceMetadata{}

// Deprecated: ThriftMetadataServiceGetThriftServiceMetadataArgsDeprecated is deprecated, since it is supposed to be internal.
type ThriftMetadataServiceGetThriftServiceMetadataArgsDeprecated = reqThriftMetadataServiceGetThriftServiceMetadata

func newReqThriftMetadataServiceGetThriftServiceMetadata() *reqThriftMetadataServiceGetThriftServiceMetadata {
    return (&reqThriftMetadataServiceGetThriftServiceMetadata{})
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g newReqThriftMetadataServiceGetThriftServiceMetadata().Set<FieldNameFoo>().Set<FieldNameBar>()
type reqThriftMetadataServiceGetThriftServiceMetadataBuilder struct {
    obj *reqThriftMetadataServiceGetThriftServiceMetadata
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g newReqThriftMetadataServiceGetThriftServiceMetadata().Set<FieldNameFoo>().Set<FieldNameBar>()
func newReqThriftMetadataServiceGetThriftServiceMetadataBuilder() *reqThriftMetadataServiceGetThriftServiceMetadataBuilder {
    return &reqThriftMetadataServiceGetThriftServiceMetadataBuilder{
        obj: newReqThriftMetadataServiceGetThriftServiceMetadata(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g newReqThriftMetadataServiceGetThriftServiceMetadata().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *reqThriftMetadataServiceGetThriftServiceMetadataBuilder) Emit() *reqThriftMetadataServiceGetThriftServiceMetadata {
    var objCopy reqThriftMetadataServiceGetThriftServiceMetadata = *x.obj
    return &objCopy
}

func (x *reqThriftMetadataServiceGetThriftServiceMetadata) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("reqThriftMetadataServiceGetThriftServiceMetadata"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqThriftMetadataServiceGetThriftServiceMetadata) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *reqThriftMetadataServiceGetThriftServiceMetadata) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("reqThriftMetadataServiceGetThriftServiceMetadata({")
    sb.WriteString("})")

    return sb.String()
}
type respThriftMetadataServiceGetThriftServiceMetadata struct {
    Success *ThriftServiceMetadataResponse `thrift:"success,0,optional" json:"success,omitempty" db:"success"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respThriftMetadataServiceGetThriftServiceMetadata{}
var _ thrift.WritableResult = &respThriftMetadataServiceGetThriftServiceMetadata{}

// Deprecated: ThriftMetadataServiceGetThriftServiceMetadataResultDeprecated is deprecated, since it is supposed to be internal.
type ThriftMetadataServiceGetThriftServiceMetadataResultDeprecated = respThriftMetadataServiceGetThriftServiceMetadata

func newRespThriftMetadataServiceGetThriftServiceMetadata() *respThriftMetadataServiceGetThriftServiceMetadata {
    return (&respThriftMetadataServiceGetThriftServiceMetadata{})
}

func (x *respThriftMetadataServiceGetThriftServiceMetadata) GetSuccessNonCompat() *ThriftServiceMetadataResponse {
    return x.Success
}

func (x *respThriftMetadataServiceGetThriftServiceMetadata) GetSuccess() *ThriftServiceMetadataResponse {
    if !x.IsSetSuccess() {
        return nil
    }

    return x.Success
}

func (x *respThriftMetadataServiceGetThriftServiceMetadata) SetSuccessNonCompat(value ThriftServiceMetadataResponse) *respThriftMetadataServiceGetThriftServiceMetadata {
    x.Success = &value
    return x
}

func (x *respThriftMetadataServiceGetThriftServiceMetadata) SetSuccess(value *ThriftServiceMetadataResponse) *respThriftMetadataServiceGetThriftServiceMetadata {
    x.Success = value
    return x
}

func (x *respThriftMetadataServiceGetThriftServiceMetadata) IsSetSuccess() bool {
    return x != nil && x.Success != nil
}

func (x *respThriftMetadataServiceGetThriftServiceMetadata) writeField0(p thrift.Format) error {  // Success
    if !x.IsSetSuccess() {
        return nil
    }

    if err := p.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetSuccessNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respThriftMetadataServiceGetThriftServiceMetadata) readField0(p thrift.Format) error {  // Success
    result := *NewThriftServiceMetadataResponse()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetSuccessNonCompat(result)
    return nil
}

func (x *respThriftMetadataServiceGetThriftServiceMetadata) toString0() string {  // Success
    return fmt.Sprintf("%v", x.GetSuccessNonCompat())
}

// Deprecated: Use newRespThriftMetadataServiceGetThriftServiceMetadata().GetSuccess() instead.
func (x *respThriftMetadataServiceGetThriftServiceMetadata) DefaultGetSuccess() *ThriftServiceMetadataResponse {
    if !x.IsSetSuccess() {
        return NewThriftServiceMetadataResponse()
    }
    return x.Success
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g newRespThriftMetadataServiceGetThriftServiceMetadata().Set<FieldNameFoo>().Set<FieldNameBar>()
type respThriftMetadataServiceGetThriftServiceMetadataBuilder struct {
    obj *respThriftMetadataServiceGetThriftServiceMetadata
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g newRespThriftMetadataServiceGetThriftServiceMetadata().Set<FieldNameFoo>().Set<FieldNameBar>()
func newRespThriftMetadataServiceGetThriftServiceMetadataBuilder() *respThriftMetadataServiceGetThriftServiceMetadataBuilder {
    return &respThriftMetadataServiceGetThriftServiceMetadataBuilder{
        obj: newRespThriftMetadataServiceGetThriftServiceMetadata(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g newRespThriftMetadataServiceGetThriftServiceMetadata().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *respThriftMetadataServiceGetThriftServiceMetadataBuilder) Success(value *ThriftServiceMetadataResponse) *respThriftMetadataServiceGetThriftServiceMetadataBuilder {
    x.obj.Success = value
    return x
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g newRespThriftMetadataServiceGetThriftServiceMetadata().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *respThriftMetadataServiceGetThriftServiceMetadataBuilder) Emit() *respThriftMetadataServiceGetThriftServiceMetadata {
    var objCopy respThriftMetadataServiceGetThriftServiceMetadata = *x.obj
    return &objCopy
}

func (x *respThriftMetadataServiceGetThriftServiceMetadata) Exception() thrift.WritableException {
    return nil
}

func (x *respThriftMetadataServiceGetThriftServiceMetadata) Write(p thrift.Format) error {
    if err := p.WriteStructBegin("respThriftMetadataServiceGetThriftServiceMetadata"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respThriftMetadataServiceGetThriftServiceMetadata) Read(p thrift.Format) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        case (id == 0 && wireType == thrift.Type(thrift.STRUCT)):  // success
            if err := x.readField0(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *respThriftMetadataServiceGetThriftServiceMetadata) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("respThriftMetadataServiceGetThriftServiceMetadata({")
    sb.WriteString(fmt.Sprintf("Success:%s", x.toString0()))
    sb.WriteString("})")

    return sb.String()
}


type ThriftMetadataServiceProcessor struct {
    processorMap       map[string]thrift.ProcessorFunctionContext
    functionServiceMap map[string]string
    handler            ThriftMetadataService
}
// Compile time interface enforcer
var _ thrift.ProcessorContext = &ThriftMetadataServiceProcessor{}

func NewThriftMetadataServiceProcessor(handler ThriftMetadataService) *ThriftMetadataServiceProcessor {
    p := &ThriftMetadataServiceProcessor{
        handler:            handler,
        processorMap:       make(map[string]thrift.ProcessorFunctionContext),
        functionServiceMap: make(map[string]string),
    }
    p.AddToProcessorMap("getThriftServiceMetadata", &procFuncThriftMetadataServiceGetThriftServiceMetadata{handler: handler})
    p.AddToFunctionServiceMap("getThriftServiceMetadata", "ThriftMetadataService")

    return p
}

func (p *ThriftMetadataServiceProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunctionContext) {
    p.processorMap[key] = processor
}

func (p *ThriftMetadataServiceProcessor) AddToFunctionServiceMap(key, service string) {
    p.functionServiceMap[key] = service
}

func (p *ThriftMetadataServiceProcessor) GetProcessorFunctionContext(key string) (processor thrift.ProcessorFunctionContext, err error) {
    if processor, ok := p.processorMap[key]; ok {
        return processor, nil
    }
    return nil, nil
}

func (p *ThriftMetadataServiceProcessor) ProcessorMap() map[string]thrift.ProcessorFunctionContext {
    return p.processorMap
}

func (p *ThriftMetadataServiceProcessor) FunctionServiceMap() map[string]string {
    return p.functionServiceMap
}

func (p *ThriftMetadataServiceProcessor) GetThriftMetadata() *ThriftMetadata {
    return GetThriftMetadataForService("metadata.ThriftMetadataService")
}


type procFuncThriftMetadataServiceGetThriftServiceMetadata struct {
    handler ThriftMetadataService
}
// Compile time interface enforcer
var _ thrift.ProcessorFunctionContext = &procFuncThriftMetadataServiceGetThriftServiceMetadata{}

func (p *procFuncThriftMetadataServiceGetThriftServiceMetadata) Read(iprot thrift.Format) (thrift.Struct, thrift.Exception) {
    args := newReqThriftMetadataServiceGetThriftServiceMetadata()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncThriftMetadataServiceGetThriftServiceMetadata) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Format) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("getThriftServiceMetadata", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncThriftMetadataServiceGetThriftServiceMetadata) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    result := newRespThriftMetadataServiceGetThriftServiceMetadata()
    retval, err := p.handler.GetThriftServiceMetadata(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetThriftServiceMetadata: " + err.Error(), err)
        return x, x
    }

    result.Success = retval
    return result, nil
}
